// src/pages/Vulnerabilities.tsx
import React, { useState, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Paper,
  Typography,
  Button,
  Chip,
  IconButton,
  TextField,
  MenuItem,
  Grid,
  Drawer,
  FormControl,
  InputLabel,
  Select,
  SelectChangeEvent,
  Alert,
  useTheme,
} from '@mui/material';
import {
  Add as AddIcon,
  FilterList as FilterListIcon,
  Download as DownloadIcon,
  Close as CloseIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Assignment as AssignmentIcon,
} from '@mui/icons-material';
import { DataGrid, GridColDef, GridRowSelectionModel } from '@mui/x-data-grid';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { format } from 'date-fns';

import { vulnerabilitiesApi } from '../api/vulnerabilities';
import { teamsApi } from '../api/teams';
import { useAuth } from '../contexts/AuthContext';
import {
  Vulnerability,
  VulnerabilityStatus,
  VulnerabilitySeverity,
  VulnerabilityFilter,
  Team,
} from '../types';
import VulnerabilityDetail from '../components/vulnerabilities/VulnerabilityDetail';
import VulnerabilityForm from '../components/vulnerabilities/VulnerabilityForm';

const Vulnerabilities: React.FC = () => {
  const theme = useTheme();
  const { id } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const queryClient = useQueryClient();

  const [selectedRows, setSelectedRows] = useState<GridRowSelectionModel>([]);
  const [filterOpen, setFilterOpen] = useState(false);
  const [formOpen, setFormOpen] = useState(false);
  const [assignDialogOpen, setAssignDialogOpen] = useState(false);
  const [selectedTeamId, setSelectedTeamId] = useState('');
  const [filters, setFilters] = useState<VulnerabilityFilter>({});

  const isAdmin = user?.role === 'admin';

  // Fetch vulnerabilities
  const { data: vulnerabilities = [], isLoading } = useQuery({
    queryKey: ['vulnerabilities', filters],
    queryFn: () => vulnerabilitiesApi.list(filters),
  });

  // Fetch teams for assignment
  const { data: teams = [] } = useQuery({
    queryKey: ['teams'],
    queryFn: () => teamsApi.list(),
  });

  // Delete mutation
  const deleteMutation = useMutation({
    mutationFn: vulnerabilitiesApi.delete,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vulnerabilities'] });
    },
  });

  // Assign to team mutation
  const assignMutation = useMutation({
    mutationFn: ({ vulnerabilityId, teamId }: { vulnerabilityId: string; teamId: string }) =>
      vulnerabilitiesApi.assignToTeam(vulnerabilityId, teamId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vulnerabilities'] });
      setAssignDialogOpen(false);
      setSelectedRows([]);
    },
  });

  // Get severity color
  const getSeverityColor = (severity: VulnerabilitySeverity) => {
    return theme.severity[severity.toLowerCase() as keyof typeof theme.severity];
  };

  // Get status color
  const getStatusColor = (status: VulnerabilityStatus) => {
    const statusKey = status.replace('_', '') as keyof typeof theme.status;
    return theme.status[statusKey];
  };

  // DataGrid columns
  const columns: GridColDef[] = [
    {
      field: 'severity',
      headerName: 'Severità',
      width: 100,
      renderCell: (params) => (
        <Chip
          label={params.value}
          size="small"
          sx={{
            backgroundColor: getSeverityColor(params.value),
            color: 'white',
            fontWeight: 'bold',
          }}
        />
      ),
    },
    {
      field: 'title',
      headerName: 'Titolo',
      flex: 1,
      minWidth: 200,
    },
    {
      field: 'ip_address',
      headerName: 'IP Address',
      width: 150,
    },
    {
      field: 'hostname',
      headerName: 'Hostname',
      width: 150,
    },
    {
      field: 'cvss_score',
      headerName: 'CVSS',
      width: 80,
      renderCell: (params) => (
        <Typography variant="body2" fontWeight="bold">
          {params.value}
        </Typography>
      ),
    },
    {
      field: 'epss_score',
      headerName: 'EPSS',
      width: 80,
      renderCell: (params) => (
        <Typography variant="body2">
          {params.value ? `${(params.value * 100).toFixed(1)}%` : '-'}
        </Typography>
      ),
    },
    {
      field: 'status',
      headerName: 'Stato',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value}
          size="small"
          variant="outlined"
          sx={{
            borderColor: getStatusColor(params.value),
            color: getStatusColor(params.value),
          }}
        />
      ),
    },
    {
      field: 'discovered_at',
      headerName: 'Scoperta',
      width: 120,
      renderCell: (params) => format(new Date(params.value), 'dd/MM/yyyy'),
    },
    {
      field: 'actions',
      headerName: 'Azioni',
      width: 120,
      sortable: false,
      renderCell: (params) => (
        <Box>
          <IconButton
            size="small"
            onClick={() => navigate(`/vulnerabilities/${params.row.id}`)}
          >
            <EditIcon fontSize="small" />
          </IconButton>
          {isAdmin && (
            <IconButton
              size="small"
              onClick={() => deleteMutation.mutate(params.row.id)}
              color="error"
            >
              <DeleteIcon fontSize="small" />
            </IconButton>
          )}
        </Box>
      ),
    },
  ];

  // Filter vulnerabilities based on selected detail
  const filteredVulnerabilities = useMemo(() => {
    if (!id) return vulnerabilities;
    return vulnerabilities.filter((v) => v.id === id);
  }, [vulnerabilities, id]);

  // Handle filter change
  const handleFilterChange = (field: keyof VulnerabilityFilter, value: any) => {
    setFilters((prev) => ({
      ...prev,
      [field]: value || undefined,
    }));
  };

  // Handle bulk assign
  const handleBulkAssign = () => {
    if (selectedRows.length === 0 || !selectedTeamId) return;

    selectedRows.forEach((rowId) => {
      assignMutation.mutate({
        vulnerabilityId: rowId as string,
        teamId: selectedTeamId,
      });
    });
  };

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">Vulnerabilità</Typography>
        <Box display="flex" gap={2}>
          <Button
            startIcon={<FilterListIcon />}
            onClick={() => setFilterOpen(true)}
          >
            Filtri
          </Button>
          <Button
            startIcon={<DownloadIcon />}
            variant="outlined"
          >
            Esporta
          </Button>
          {isAdmin && (
            <Button
              startIcon={<AddIcon />}
              variant="contained"
              onClick={() => setFormOpen(true)}
            >
              Aggiungi
            </Button>
          )}
        </Box>
      </Box>

      {/* Bulk actions */}
      {isAdmin && selectedRows.length > 0 && (
        <Alert
          severity="info"
          sx={{ mb: 2 }}
          action={
            <Box display="flex" gap={1}>
              <FormControl size="small" sx={{ minWidth: 200 }}>
                <Select
                  value={selectedTeamId}
                  onChange={(e) => setSelectedTeamId(e.target.value)}
                  displayEmpty
                >
                  <MenuItem value="">
                    <em>Seleziona team</em>
                  </MenuItem>
                  {teams.map((team) => (
                    <MenuItem key={team.id} value={team.id}>
                      {team.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <Button
                size="small"
                startIcon={<AssignmentIcon />}
                onClick={handleBulkAssign}
                disabled={!selectedTeamId}
              >
                Assegna
              </Button>
            </Box>
          }
        >
          {selectedRows.length} vulnerabilità selezionate
        </Alert>
      )}

      {/* Main content */}
      <Grid container spacing={3}>
        <Grid item xs={12} lg={id ? 8 : 12}>
          <Paper sx={{ height: 600 }}>
            <DataGrid
              rows={filteredVulnerabilities}
              columns={columns}
              loading={isLoading}
              checkboxSelection={isAdmin}
              rowSelectionModel={selectedRows}
              onRowSelectionModelChange={setSelectedRows}
              onRowClick={(params) => navigate(`/vulnerabilities/${params.row.id}`)}
              sx={{
                '& .MuiDataGrid-row': {
                  cursor: 'pointer',
                },
              }}
            />
          </Paper>
        </Grid>

        {/* Detail panel */}
        {id && (
          <Grid item xs={12} lg={4}>
            <VulnerabilityDetail
              vulnerabilityId={id}
              onClose={() => navigate('/vulnerabilities')}
            />
          </Grid>
        )}
      </Grid>

      {/* Filter drawer */}
      <Drawer
        anchor="right"
        open={filterOpen}
        onClose={() => setFilterOpen(false)}
        sx={{ '& .MuiDrawer-paper': { width: 320, p: 3 } }}
      >
        <Box>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
            <Typography variant="h6">Filtri</Typography>
            <IconButton onClick={() => setFilterOpen(false)}>
              <CloseIcon />
            </IconButton>
          </Box>

          <Grid container spacing={2}>
            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Stato</InputLabel>
                <Select
                  value={filters.status || ''}
                  onChange={(e) => handleFilterChange('status', e.target.value)}
                  label="Stato"
                >
                  <MenuItem value="">Tutti</MenuItem>
                  <MenuItem value={VulnerabilityStatus.Open}>Aperto</MenuItem>
                  <MenuItem value={VulnerabilityStatus.InProgress}>In corso</MenuItem>
                  <MenuItem value={VulnerabilityStatus.Resolved}>Risolto</MenuItem>
                  <MenuItem value={VulnerabilityStatus.Closed}>Chiuso</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Severità</InputLabel>
                <Select
                  value={filters.severity || ''}
                  onChange={(e) => handleFilterChange('severity', e.target.value)}
                  label="Severità"
                >
                  <MenuItem value="">Tutte</MenuItem>
                  <MenuItem value={VulnerabilitySeverity.Critical}>Critico</MenuItem>
                  <MenuItem value={VulnerabilitySeverity.High}>Alto</MenuItem>
                  <MenuItem value={VulnerabilitySeverity.Medium}>Medio</MenuItem>
                  <MenuItem value={VulnerabilitySeverity.Low}>Basso</MenuItem>
                  <MenuItem value={VulnerabilitySeverity.Info}>Info</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                label="IP Address"
                value={filters.ip_address || ''}
                onChange={(e) => handleFilterChange('ip_address', e.target.value)}
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Hostname"
                value={filters.hostname || ''}
                onChange={(e) => handleFilterChange('hostname', e.target.value)}
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                label="CVE ID"
                value={filters.cve_id || ''}
                onChange={(e) => handleFilterChange('cve_id', e.target.value)}
              />
            </Grid>

            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Team Assegnato</InputLabel>
                <Select
                  value={filters.assigned_team_id || ''}
                  onChange={(e) => handleFilterChange('assigned_team_id', e.target.value)}
                  label="Team Assegnato"
                >
                  <MenuItem value="">Tutti</MenuItem>
                  {teams.map((team) => (
                    <MenuItem key={team.id} value={team.id}>
                      {team.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12}>
              <Button
                fullWidth
                variant="outlined"
                onClick={() => {
                  setFilters({});
                  setFilterOpen(false);
                }}
              >
                Ripristina Filtri
              </Button>
            </Grid>
          </Grid>
        </Box>
      </Drawer>

      {/* Add/Edit Form Dialog */}
      {formOpen && (
        <VulnerabilityForm
          open={formOpen}
          onClose={() => setFormOpen(false)}
          onSuccess={() => {
            setFormOpen(false);
            queryClient.invalidateQueries({ queryKey: ['vulnerabilities'] });
          }}
        />
      )}
    </Box>
  );
};
export default Vulnerabilities;