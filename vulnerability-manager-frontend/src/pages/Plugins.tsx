// src/pages/Plugins.tsx
import React, { useState, useCallback } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  Switch,
  Chip,
  IconButton,
  TextField,
  InputAdornment,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  Skeleton,
  Tooltip,
  Paper,
  Divider,
  LinearProgress,
} from '@mui/material';
import {
  Refresh as RefreshIcon,
  Search as SearchIcon,
  Settings as SettingsIcon,
  PlayArrow as PlayIcon,
  Upload as UploadIcon,
  Info as InfoIcon,
  Code as CodeIcon,
  BugReport as BugIcon,
} from '@mui/icons-material';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { motion, AnimatePresence } from 'framer-motion';
import { pluginsApi } from '../api/plugins';
import { Plugin } from '../types';

const Plugins: React.FC = () => {
  const queryClient = useQueryClient();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedPlugin, setSelectedPlugin] = useState<Plugin | null>(null);
  const [configDialogOpen, setConfigDialogOpen] = useState(false);
  const [testDialogOpen, setTestDialogOpen] = useState(false);
  const [testResult, setTestResult] = useState<any>(null);

  // Fetch plugins
  const { data: plugins = [], isLoading, refetch } = useQuery({
    queryKey: ['plugins'],
    queryFn: pluginsApi.list,
  });

  // Toggle plugin mutation
  const toggleMutation = useMutation({
    mutationFn: (pluginId: string) => pluginsApi.toggle(pluginId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['plugins'] });
    },
  });

  // Test plugin mutation
  const testMutation = useMutation({
    mutationFn: ({ pluginId, action }: { pluginId: string; action: string }) =>
      pluginsApi.execute(pluginId, action, {}),
    onSuccess: (data) => {
      setTestResult(data);
    },
  });

  // Filter plugins
  const filteredPlugins = plugins.filter(plugin =>
    plugin.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    plugin.display_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    plugin.description?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleToggle = async (plugin: Plugin) => {
    await toggleMutation.mutateAsync(plugin.id);
  };

  const handleTest = async (plugin: Plugin) => {
    setSelectedPlugin(plugin);
    setTestDialogOpen(true);
    setTestResult(null);
    
    // Run test
    await testMutation.mutateAsync({
      pluginId: plugin.id,
      action: 'info'
    });
  };

  const handleRefresh = async () => {
    await refetch();
  };

  const getPluginIcon = (type: string) => {
    switch (type) {
      case 'import': return '📥';
      case 'export': return '📤';
      case 'notification': return '🔔';
      case 'analysis': return '🔍';
      case 'integration': return '🔗';
      default: return '🔌';
    }
  };

  const getPluginTypeColor = (type: string) => {
    switch (type) {
      case 'import': return 'primary';
      case 'export': return 'secondary';
      case 'notification': return 'warning';
      case 'analysis': return 'info';
      case 'integration': return 'success';
      default: return 'default';
    }
  };

  return (
    <Box>
      {/* Header */}
      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="h4" sx={{ fontWeight: 600 }}>
          Plugin Manager
        </Typography>
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Button
            variant="outlined"
            startIcon={<UploadIcon />}
            onClick={() => {/* TODO: Implement upload */}}
          >
            Upload Plugin
          </Button>
          <IconButton onClick={handleRefresh} disabled={isLoading}>
            <RefreshIcon />
          </IconButton>
        </Box>
      </Box>

      {/* Search Bar */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <TextField
            fullWidth
            variant="outlined"
            placeholder="Search plugins..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
            }}
          />
        </CardContent>
      </Card>

      {/* Plugin Grid */}
      {isLoading ? (
        <Grid container spacing={3}>
          {[1, 2, 3, 4].map((i) => (
            <Grid item xs={12} md={6} key={i}>
              <Skeleton variant="rectangular" height={200} />
            </Grid>
          ))}
        </Grid>
      ) : (
        <AnimatePresence>
          <Grid container spacing={3}>
            {filteredPlugins.map((plugin) => (
              <Grid item xs={12} md={6} key={plugin.id}>
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3 }}
                >
                  <Card
                    sx={{
                      height: '100%',
                      opacity: plugin.enabled ? 1 : 0.7,
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        transform: 'translateY(-4px)',
                        boxShadow: (theme) => theme.shadows[8],
                      },
                    }}
                  >
                    <CardContent>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <Typography variant="h2" sx={{ fontSize: '2rem' }}>
                            {getPluginIcon(plugin.type)}
                          </Typography>
                          <Box>
                            <Typography variant="h6" sx={{ fontWeight: 600 }}>
                              {plugin.display_name}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              v{plugin.version} by {plugin.author}
                            </Typography>
                          </Box>
                        </Box>
                        <Switch
                          checked={plugin.enabled}
                          onChange={() => handleToggle(plugin)}
                          disabled={toggleMutation.isPending}
                        />
                      </Box>

                      <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                        {plugin.description}
                      </Typography>

                      <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                        <Chip
                          size="small"
                          label={plugin.type}
                          color={getPluginTypeColor(plugin.type) as any}
                        />
                        <Chip
                          size="small"
                          label={plugin.language}
                          variant="outlined"
                          icon={<CodeIcon sx={{ fontSize: '0.875rem' }} />}
                        />
                      </Box>

                      <Box sx={{ display: 'flex', gap: 1 }}>
                        <Tooltip title="Configure">
                          <IconButton
                            size="small"
                            onClick={() => {
                              setSelectedPlugin(plugin);
                              setConfigDialogOpen(true);
                            }}
                            disabled={!plugin.enabled}
                          >
                            <SettingsIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Test">
                          <IconButton
                            size="small"
                            onClick={() => handleTest(plugin)}
                            disabled={!plugin.enabled}
                          >
                            <PlayIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="View Logs">
                          <IconButton size="small" disabled={!plugin.enabled}>
                            <BugIcon />
                          </IconButton>
                        </Tooltip>
                      </Box>
                    </CardContent>
                    {toggleMutation.isPending && <LinearProgress />}
                  </Card>
                </motion.div>
              </Grid>
            ))}
          </Grid>
        </AnimatePresence>
      )}

      {/* Empty State */}
      {!isLoading && filteredPlugins.length === 0 && (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6" color="text.secondary">
            No plugins found
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
            {searchTerm ? 'Try a different search term' : 'Upload a plugin to get started'}
          </Typography>
        </Paper>
      )}

      {/* Config Dialog */}
      <Dialog open={configDialogOpen} onClose={() => setConfigDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          Configure {selectedPlugin?.display_name}
        </DialogTitle>
        <DialogContent>
          <Alert severity="info" sx={{ mt: 2 }}>
            Plugin configuration coming soon
          </Alert>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfigDialogOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>

      {/* Test Dialog */}
      <Dialog open={testDialogOpen} onClose={() => setTestDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          Test {selectedPlugin?.display_name}
        </DialogTitle>
        <DialogContent>
          {testMutation.isPending ? (
            <Box sx={{ p: 4, textAlign: 'center' }}>
              <LinearProgress sx={{ mb: 2 }} />
              <Typography>Running test...</Typography>
            </Box>
          ) : testResult ? (
            <Box>
              <Alert severity={testResult.success ? 'success' : 'error'} sx={{ mb: 2 }}>
                Test {testResult.success ? 'passed' : 'failed'}
              </Alert>
              <Paper sx={{ p: 2, bgcolor: 'grey.100' }}>
                <Typography variant="caption" component="pre">
                  {JSON.stringify(testResult.data, null, 2)}
                </Typography>
              </Paper>
            </Box>
          ) : null}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setTestDialogOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Plugins;