// src/pages/Settings.tsx
import React, { useState } from 'react';
import {
  Box,
  Container,
  Paper,
  Tabs,
  Tab,
  Typography,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  Switch,
  TextField,
  Button,
  Grid,
  Card,
  CardContent,
  Alert,
  Snackbar,
  alpha,
} from '@mui/material';
import {
  Palette as PaletteIcon,
  Notifications as NotificationsIcon,
  Security as SecurityIcon,
  Api as ApiIcon,
  Person as PersonIcon,
  Save as SaveIcon,
} from '@mui/icons-material';
import { useEnhancedTheme } from '../contexts/EnhancedThemeContext';
import ThemeSelector from '../components/settings/ThemeSelector';
import { AnimatedCard } from '../components/common/AnimatedCard';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel: React.FC<TabPanelProps> = ({ children, value, index, ...other }) => {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`settings-tabpanel-${index}`}
      aria-labelledby={`settings-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );
};

const Settings: React.FC = () => {
  const [activeTab, setActiveTab] = useState(0);
  const [showSnackbar, setShowSnackbar] = useState(false);
  //const { currentTheme, setTheme } = useEnhancedTheme();
  
  // Stati per le impostazioni
  const [notifications, setNotifications] = useState({
    email: true,
    push: false,
    critical: true,
    weekly: false,
  });

  const [security, setSecurity] = useState({
    twoFactor: false,
    sessionTimeout: '30',
    ipWhitelist: false,
  });

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleSave = () => {
    // Simula salvataggio
    setShowSnackbar(true);
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" fontWeight={700} gutterBottom>
          Impostazioni
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Personalizza l'applicazione secondo le tue preferenze
        </Typography>
      </Box>

      <Paper sx={{ borderRadius: 2, overflow: 'hidden' }}>
        <Box sx={{ display: 'flex', height: 'calc(100vh - 200px)' }}>
          {/* Sidebar con tabs */}
          <Box
            sx={{
              width: 280,
              borderRight: 1,
              borderColor: 'divider',
              background: (theme) => 
                theme.palette.mode === 'dark' 
                  ? alpha(theme.palette.background.paper, 0.5)
                  : theme.palette.grey[50],
            }}
          >
            <Tabs
              orientation="vertical"
              value={activeTab}
              onChange={handleTabChange}
              aria-label="Impostazioni tabs"
              sx={{
                '& .MuiTab-root': {
                  minHeight: 64,
                  alignItems: 'flex-start',
                  textAlign: 'left',
                  px: 3,
                },
              }}
            >
              <Tab
                icon={<PaletteIcon />}
                label="Aspetto"
                iconPosition="start"
              />
              <Tab
                icon={<NotificationsIcon />}
                label="Notifiche"
                iconPosition="start"
              />
              <Tab
                icon={<SecurityIcon />}
                label="Sicurezza"
                iconPosition="start"
              />
              <Tab
                icon={<ApiIcon />}
                label="API"
                iconPosition="start"
              />
              <Tab
                icon={<PersonIcon />}
                label="Profilo"
                iconPosition="start"
              />
            </Tabs>
          </Box>

          {/* Contenuto principale */}
          <Box sx={{ flex: 1, overflow: 'auto', p: 4 }}>
            {/* Tab Aspetto */}
            <TabPanel value={activeTab} index={0}>
              <ThemeSelector />
            </TabPanel>

            {/* Tab Notifiche */}
            <TabPanel value={activeTab} index={1}>
              <Typography variant="h5" gutterBottom fontWeight={600}>
                Preferenze Notifiche
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Configura come e quando ricevere notifiche dal sistema
              </Typography>

              <List>
                <ListItem>
                  <ListItemText
                    primary="Notifiche Email"
                    secondary="Ricevi notifiche via email per eventi importanti"
                  />
                  <ListItemSecondaryAction>
                    <Switch
                      edge="end"
                      checked={notifications.email}
                      onChange={(e) => 
                        setNotifications({ ...notifications, email: e.target.checked })
                      }
                    />
                  </ListItemSecondaryAction>
                </ListItem>
                <Divider />
                <ListItem>
                  <ListItemText
                    primary="Notifiche Push"
                    secondary="Ricevi notifiche push nel browser"
                  />
                  <ListItemSecondaryAction>
                    <Switch
                      edge="end"
                      checked={notifications.push}
                      onChange={(e) => 
                        setNotifications({ ...notifications, push: e.target.checked })
                      }
                    />
                  </ListItemSecondaryAction>
                </ListItem>
                <Divider />
                <ListItem>
                  <ListItemText
                    primary="Vulnerabilità Critiche"
                    secondary="Notifica immediata per vulnerabilità con CVSS >= 9.0"
                  />
                  <ListItemSecondaryAction>
                    <Switch
                      edge="end"
                      checked={notifications.critical}
                      onChange={(e) => 
                        setNotifications({ ...notifications, critical: e.target.checked })
                      }
                    />
                  </ListItemSecondaryAction>
                </ListItem>
                <Divider />
                <ListItem>
                  <ListItemText
                    primary="Report Settimanale"
                    secondary="Ricevi un riepilogo settimanale delle attività"
                  />
                  <ListItemSecondaryAction>
                    <Switch
                      edge="end"
                      checked={notifications.weekly}
                      onChange={(e) => 
                        setNotifications({ ...notifications, weekly: e.target.checked })
                      }
                    />
                  </ListItemSecondaryAction>
                </ListItem>
              </List>
            </TabPanel>

            {/* Tab Sicurezza */}
            <TabPanel value={activeTab} index={2}>
              <Typography variant="h5" gutterBottom fontWeight={600}>
                Impostazioni di Sicurezza
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Configura le opzioni di sicurezza per il tuo account
              </Typography>

              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <AnimatedCard>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        Autenticazione a Due Fattori
                      </Typography>
                      <Typography variant="body2" color="text.secondary" paragraph>
                        Aggiungi un ulteriore livello di sicurezza al tuo account
                      </Typography>
                      <Button
                        variant={security.twoFactor ? "outlined" : "contained"}
                        color="primary"
                        onClick={() => 
                          setSecurity({ ...security, twoFactor: !security.twoFactor })
                        }
                      >
                        {security.twoFactor ? 'Disabilita 2FA' : 'Abilita 2FA'}
                      </Button>
                    </CardContent>
                  </AnimatedCard>
                </Grid>

                <Grid item xs={12}>
                  <AnimatedCard>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        Timeout Sessione
                      </Typography>
                      <Typography variant="body2" color="text.secondary" paragraph>
                        Tempo di inattività prima del logout automatico
                      </Typography>
                      <TextField
                        select
                        fullWidth
                        value={security.sessionTimeout}
                        onChange={(e) => 
                          setSecurity({ ...security, sessionTimeout: e.target.value })
                        }
                        SelectProps={{ native: true }}
                      >
                        <option value="15">15 minuti</option>
                        <option value="30">30 minuti</option>
                        <option value="60">1 ora</option>
                        <option value="120">2 ore</option>
                      </TextField>
                    </CardContent>
                  </AnimatedCard>
                </Grid>

                <Grid item xs={12}>
                  <AnimatedCard>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        Whitelist IP
                      </Typography>
                      <Typography variant="body2" color="text.secondary" paragraph>
                        Limita l'accesso solo da indirizzi IP autorizzati
                      </Typography>
                      <Switch
                        checked={security.ipWhitelist}
                        onChange={(e) => 
                          setSecurity({ ...security, ipWhitelist: e.target.checked })
                        }
                      />
                      {security.ipWhitelist && (
                        <TextField
                          fullWidth
                          multiline
                          rows={3}
                          placeholder="Inserisci un IP per riga"
                          sx={{ mt: 2 }}
                        />
                      )}
                    </CardContent>
                  </AnimatedCard>
                </Grid>
              </Grid>
            </TabPanel>

            {/* Tab API */}
            <TabPanel value={activeTab} index={3}>
              <Typography variant="h5" gutterBottom fontWeight={600}>
                Configurazione API
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Gestisci le chiavi API e le integrazioni
              </Typography>

              <Grid container spacing={3}>
                <Grid item xs={12}>
                  <AnimatedCard>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        Chiavi API
                      </Typography>
                      <Alert severity="info" sx={{ mb: 2 }}>
                        Le chiavi API permettono l'integrazione con tool esterni
                      </Alert>
                      <Button variant="contained" color="primary">
                        Genera Nuova Chiave
                      </Button>
                    </CardContent>
                  </AnimatedCard>
                </Grid>

                <Grid item xs={12}>
                  <AnimatedCard>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        Integrazioni Attive
                      </Typography>
                      <List>
                        <ListItem>
                          <ListItemText
                            primary="Nessus"
                            secondary="Ultima sincronizzazione: 2 ore fa"
                          />
                        </ListItem>
                        <ListItem>
                          <ListItemText
                            primary="Qualys"
                            secondary="Ultima sincronizzazione: 30 minuti fa"
                          />
                        </ListItem>
                      </List>
                    </CardContent>
                  </AnimatedCard>
                </Grid>
              </Grid>
            </TabPanel>

            {/* Tab Profilo */}
            <TabPanel value={activeTab} index={4}>
              <Typography variant="h5" gutterBottom fontWeight={600}>
                Profilo Utente
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Gestisci le informazioni del tuo profilo
              </Typography>

              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    label="Nome"
                    defaultValue="Admin"
                    margin="normal"
                  />
                  <TextField
                    fullWidth
                    label="Cognome"
                    defaultValue="User"
                    margin="normal"
                  />
                  <TextField
                    fullWidth
                    label="Email"
                    defaultValue="admin@dognet.tech"
                    margin="normal"
                    type="email"
                  />
                  <TextField
                    fullWidth
                    label="Ruolo"
                    defaultValue="Administrator"
                    margin="normal"
                    disabled
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <Card sx={{ p: 3, textAlign: 'center' }}>
                    <Box
                      sx={{
                        width: 120,
                        height: 120,
                        borderRadius: '50%',
                        background: (theme) => 
                          `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        mx: 'auto',
                        mb: 2,
                        fontSize: 48,
                        fontWeight: 700,
                        color: 'white',
                      }}
                    >
                      A
                    </Box>
                    <Button variant="outlined">
                      Cambia Avatar
                    </Button>
                  </Card>
                </Grid>
              </Grid>
            </TabPanel>

            {/* Pulsante Salva */}
            <Box sx={{ mt: 4, display: 'flex', justifyContent: 'flex-end' }}>
              <Button
                variant="contained"
                color="primary"
                size="large"
                startIcon={<SaveIcon />}
                onClick={handleSave}
                sx={{ px: 4 }}
              >
                Salva Modifiche
              </Button>
            </Box>
          </Box>
        </Box>
      </Paper>

      {/* Snackbar per conferma salvataggio */}
      <Snackbar
        open={showSnackbar}
        autoHideDuration={3000}
        onClose={() => setShowSnackbar(false)}
        message="Impostazioni salvate con successo"
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      />
    </Container>
  );
};

export default Settings;