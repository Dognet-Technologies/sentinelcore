// src/pages/NewReport.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  SelectChangeEvent,
  Stepper,
  Step,
  StepLabel,
  Alert,
  Chip,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  Checkbox,
  FormGroup,
  IconButton,
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  ArrowForward as ArrowForwardIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  Add as AddIcon,
  Delete as DeleteIcon,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { api } from '../api/api';
import type { Host, Vulnerability } from '../types';

const steps = ['Selezione Host', 'Selezione Vulnerabilità', 'Dettagli Report', 'Riepilogo'];

const NewReport: React.FC = () => {
  const navigate = useNavigate();
  const [activeStep, setActiveStep] = useState(0);
  const [hosts, setHosts] = useState<Host[]>([]);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Form state - CORREZIONE: selectedVulnerabilities deve essere string[]
  const [selectedHosts, setSelectedHosts] = useState<number[]>([]);
  const [selectedVulnerabilities, setSelectedVulnerabilities] = useState<string[]>([]);
  const [reportData, setReportData] = useState({
    title: '',
    description: '',
    severity: 'medium' as 'low' | 'medium' | 'high' | 'critical',
    format: 'pdf' as 'pdf' | 'html' | 'json',
    includeRemediation: true,
    includeExecutiveSummary: true,
    recipientTeams: [] as number[],
  });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      const [hostsRes, vulnsRes] = await Promise.all([
        api.get('/hosts'),
        api.get('/vulnerabilities'),
      ]);
      setHosts(hostsRes.data);
      setVulnerabilities(vulnsRes.data);
    } catch (err) {
      setError('Errore nel caricamento dei dati');
      console.error('Error fetching data:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleNext = () => {
    if (activeStep === 0 && selectedHosts.length === 0) {
      setError('Seleziona almeno un host');
      return;
    }
    if (activeStep === 1 && selectedVulnerabilities.length === 0) {
      setError('Seleziona almeno una vulnerabilità');
      return;
    }
    if (activeStep === 2 && !reportData.title) {
      setError('Inserisci un titolo per il report');
      return;
    }
    
    setError(null);
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleSubmit = async () => {
    try {
      setLoading(true);
      const payload = {
        ...reportData,
        host_ids: selectedHosts,
        vulnerability_ids: selectedVulnerabilities,
      };
      
      await api.post('/reports', payload);
      navigate('/reports');
    } catch (err) {
      setError('Errore nella creazione del report');
      console.error('Error creating report:', err);
    } finally {
      setLoading(false);
    }
  };

  const renderStepContent = () => {
    switch (activeStep) {
      case 0:
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Seleziona gli host da includere nel report
            </Typography>
            <FormGroup>
              {hosts.map((host) => (
                <FormControlLabel
                  key={host.id}
                  control={
                    <Checkbox
                      checked={selectedHosts.includes(host.id)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedHosts([...selectedHosts, host.id]);
                        } else {
                          setSelectedHosts(selectedHosts.filter(id => id !== host.id));
                        }
                      }}
                    />
                  }
                  label={
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <span>{host.hostname}</span>
                      <Typography variant="caption" color="text.secondary">
                        ({host.ip_address})
                      </Typography>
                      {host.vulnerability_count && host.vulnerability_count > 0 && (
                        <Chip
                          label={`${host.vulnerability_count} vuln`}
                          size="small"
                          color={host.vulnerability_count > 5 ? 'error' : 'warning'}
                        />
                      )}
                    </Box>
                  }
                />
              ))}
            </FormGroup>
          </Box>
        );

      case 1:
        // CORREZIONE: Ora filter funziona correttamente perché host_id potrebbe non esistere
        // Usando la relazione tramite ip_address o hostname invece
        const filteredVulnerabilities = vulnerabilities.filter(vuln => {
          // Se esiste host_id lo usiamo, altrimenti filtriamo per IP
          if (vuln.host_id !== undefined) {
            return selectedHosts.includes(vuln.host_id);
          }
          // Altrimenti cerchiamo per IP address match
          return hosts.some(host => 
            selectedHosts.includes(host.id) && 
            host.ip_address === vuln.ip_address
          );
        });
        
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Seleziona le vulnerabilità da includere nel report
            </Typography>
            <FormGroup>
              {filteredVulnerabilities.map((vuln) => (
                <FormControlLabel
                  key={vuln.id}
                  control={
                    <Checkbox
                      checked={selectedVulnerabilities.includes(vuln.id)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedVulnerabilities([...selectedVulnerabilities, vuln.id]);
                        } else {
                          setSelectedVulnerabilities(selectedVulnerabilities.filter(id => id !== vuln.id));
                        }
                      }}
                    />
                  }
                  label={
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <span>{vuln.title || vuln.name}</span>
                      <Chip
                        label={vuln.severity}
                        size="small"
                        color={
                          vuln.severity === 'critical' ? 'error' :
                          vuln.severity === 'high' ? 'warning' :
                          vuln.severity === 'medium' ? 'info' : 'default'
                        }
                      />
                      <Typography variant="caption" color="text.secondary">
                        (CVSS: {vuln.cvss_score})
                      </Typography>
                    </Box>
                  }
                />
              ))}
            </FormGroup>
          </Box>
        );

      case 2:
        return (
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            <Typography variant="h6" gutterBottom>
              Dettagli del Report
            </Typography>
            
            <TextField
              fullWidth
              label="Titolo Report"
              value={reportData.title}
              onChange={(e) => setReportData({ ...reportData, title: e.target.value })}
              required
            />

            <TextField
              fullWidth
              label="Descrizione"
              multiline
              rows={4}
              value={reportData.description}
              onChange={(e) => setReportData({ ...reportData, description: e.target.value })}
            />

            <FormControl fullWidth>
              <InputLabel>Severità Minima</InputLabel>
              <Select
                value={reportData.severity}
                onChange={(e: SelectChangeEvent) => 
                  setReportData({ ...reportData, severity: e.target.value as any })
                }
                label="Severità Minima"
              >
                <MenuItem value="low">Bassa</MenuItem>
                <MenuItem value="medium">Media</MenuItem>
                <MenuItem value="high">Alta</MenuItem>
                <MenuItem value="critical">Critica</MenuItem>
              </Select>
            </FormControl>

            <FormControl fullWidth>
              <InputLabel>Formato Report</InputLabel>
              <Select
                value={reportData.format}
                onChange={(e: SelectChangeEvent) => 
                  setReportData({ ...reportData, format: e.target.value as any })
                }
                label="Formato Report"
              >
                <MenuItem value="pdf">PDF</MenuItem>
                <MenuItem value="html">HTML</MenuItem>
                <MenuItem value="json">JSON</MenuItem>
              </Select>
            </FormControl>

            <FormGroup>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={reportData.includeRemediation}
                    onChange={(e) => 
                      setReportData({ ...reportData, includeRemediation: e.target.checked })
                    }
                  />
                }
                label="Includi suggerimenti di remediation"
              />
              <FormControlLabel
                control={
                  <Checkbox
                    checked={reportData.includeExecutiveSummary}
                    onChange={(e) => 
                      setReportData({ ...reportData, includeExecutiveSummary: e.target.checked })
                    }
                  />
                }
                label="Includi executive summary"
              />
            </FormGroup>
          </Box>
        );

      case 3:
        return (
          <Box>
            <Typography variant="h6" gutterBottom>
              Riepilogo Report
            </Typography>
            
            <Box sx={{ mt: 2 }}>
              <Typography variant="subtitle1" gutterBottom>
                <strong>Titolo:</strong> {reportData.title}
              </Typography>
              
              <Typography variant="subtitle1" gutterBottom>
                <strong>Host selezionati:</strong> {selectedHosts.length}
              </Typography>
              
              <Typography variant="subtitle1" gutterBottom>
                <strong>Vulnerabilità selezionate:</strong> {selectedVulnerabilities.length}
              </Typography>
              
              <Typography variant="subtitle1" gutterBottom>
                <strong>Formato:</strong> {reportData.format.toUpperCase()}
              </Typography>
              
              <Typography variant="subtitle1" gutterBottom>
                <strong>Severità minima:</strong> {reportData.severity}
              </Typography>
              
              {reportData.description && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="subtitle1" gutterBottom>
                    <strong>Descrizione:</strong>
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {reportData.description}
                  </Typography>
                </Box>
              )}
            </Box>
          </Box>
        );

      default:
        return 'Passaggio sconosciuto';
    }
  };

  return (
    <Box>
      <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 2 }}>
        <IconButton onClick={() => navigate('/reports')}>
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h4">
          Nuovo Report
        </Typography>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      <Card>
        <CardContent>
          <Stepper activeStep={activeStep} sx={{ mb: 4 }}>
            {steps.map((label) => (
              <Step key={label}>
                <StepLabel>{label}</StepLabel>
              </Step>
            ))}
          </Stepper>

          {renderStepContent()}

          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>
            <Button
              disabled={activeStep === 0}
              onClick={handleBack}
              startIcon={<ArrowBackIcon />}
            >
              Indietro
            </Button>
            
            <Box sx={{ display: 'flex', gap: 2 }}>
              <Button
                variant="outlined"
                onClick={() => navigate('/reports')}
                startIcon={<CancelIcon />}
              >
                Annulla
              </Button>
              
              {activeStep === steps.length - 1 ? (
                <Button
                  variant="contained"
                  onClick={handleSubmit}
                  disabled={loading}
                  startIcon={<SaveIcon />}
                >
                  Crea Report
                </Button>
              ) : (
                <Button
                  variant="contained"
                  onClick={handleNext}
                  endIcon={<ArrowForwardIcon />}
                >
                  Avanti
                </Button>
              )}
            </Box>
          </Box>
        </CardContent>
      </Card>
    </Box>
  );
};

export default NewReport;