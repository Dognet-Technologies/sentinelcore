// src/pages/Dashboard.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  LinearProgress,
  Chip,
  Avatar,
  useTheme,
  alpha,
  Paper,
  IconButton,
  Button,
  Stack,
} from '@mui/material';
import {
  BugReport as BugReportIcon,
  Computer as ComputerIcon,
  Group as GroupIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  Error as ErrorIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  MoreVert as MoreVertIcon,
  ArrowUpward as ArrowUpwardIcon,
  ArrowDownward as ArrowDownwardIcon,
  Security as SecurityIcon,
  Assignment as AssignmentIcon,
  Schedule as ScheduleIcon,
  Refresh as RefreshIcon,
} from '@mui/icons-material';
import { motion } from 'framer-motion';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler,
} from 'chart.js';
import { Line, Doughnut, Bar } from 'react-chartjs-2';
import { useAuth } from '../contexts/AuthContext';

// Registra i componenti di Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler
);

// Componente animato per le card
const AnimatedCard = motion(Card);

// Interfacce per i dati
interface DashboardStats {
  totalVulnerabilities: number;
  criticalVulnerabilities: number;
  highVulnerabilities: number;
  mediumVulnerabilities: number;
  lowVulnerabilities: number;
  totalHosts: number;
  vulnerableHosts: number;
  totalTeams: number;
  recentScans: number;
}

interface RecentActivity {
  id: number;
  type: 'scan' | 'vulnerability' | 'report';
  title: string;
  description: string;
  timestamp: string;
  severity?: 'critical' | 'high' | 'medium' | 'low';
}

export default function Dashboard() {
  const theme = useTheme();
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState<DashboardStats>({
    totalVulnerabilities: 0,
    criticalVulnerabilities: 0,
    highVulnerabilities: 0,
    mediumVulnerabilities: 0,
    lowVulnerabilities: 0,
    totalHosts: 0,
    vulnerableHosts: 0,
    totalTeams: 0,
    recentScans: 0,
  });

  const [recentActivities] = useState<RecentActivity[]>([
    {
      id: 1,
      type: 'scan',
      title: 'Scansione completata',
      description: 'Scansione della rete 192.168.1.0/24 completata',
      timestamp: '2 ore fa',
    },
    {
      id: 2,
      type: 'vulnerability',
      title: 'Nuova vulnerabilità critica',
      description: 'CVE-2024-1234 trovata su server web-01',
      timestamp: '3 ore fa',
      severity: 'critical',
    },
    {
      id: 3,
      type: 'report',
      title: 'Report generato',
      description: 'Report mensile di sicurezza generato',
      timestamp: '5 ore fa',
    },
  ]);

  useEffect(() => {
    // Simula il caricamento dei dati
    setTimeout(() => {
      setStats({
        totalVulnerabilities: 156,
        criticalVulnerabilities: 12,
        highVulnerabilities: 34,
        mediumVulnerabilities: 67,
        lowVulnerabilities: 43,
        totalHosts: 45,
        vulnerableHosts: 23,
        totalTeams: 5,
        recentScans: 8,
      });
      setLoading(false);
    }, 1000);
  }, []);

  // Dati per il grafico a torta delle vulnerabilità
  const vulnerabilityChartData = {
    labels: ['Critiche', 'Alte', 'Medie', 'Basse'],
    datasets: [
      {
        data: [
          stats.criticalVulnerabilities,
          stats.highVulnerabilities,
          stats.mediumVulnerabilities,
          stats.lowVulnerabilities,
        ],
        backgroundColor: [
          '#FF6B6B',
          '#FFA94D',
          '#4ECDC4',
          '#95E1D3',
        ],
        borderWidth: 0,
        spacing: 2,
      },
    ],
  };

  // Dati per il grafico delle tendenze
  const trendChartData = {
    labels: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu'],
    datasets: [
      {
        label: 'Vulnerabilità Critiche',
        data: [12, 15, 18, 14, 20, 16],
        borderColor: '#FF6B6B',
        backgroundColor: alpha('#FF6B6B', 0.1),
        borderWidth: 3,
        tension: 0.4,
        fill: true,
        pointBackgroundColor: '#FF6B6B',
        pointBorderColor: '#fff',
        pointBorderWidth: 2,
        pointRadius: 6,
        pointHoverRadius: 8,
      },
      {
        label: 'Vulnerabilità Risolte',
        data: [8, 12, 10, 15, 18, 22],
        borderColor: '#4ECDC4',
        backgroundColor: alpha('#4ECDC4', 0.1),
        borderWidth: 3,
        tension: 0.4,
        fill: true,
        pointBackgroundColor: '#4ECDC4',
        pointBorderColor: '#fff',
        pointBorderWidth: 2,
        pointRadius: 6,
        pointHoverRadius: 8,
      },
    ],
  };

  // Dati per il grafico a barre
  const barChartData = {
    labels: ['Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab', 'Dom'],
    datasets: [
      {
        label: 'Scansioni',
        data: [12, 19, 3, 5, 2, 3, 8],
        backgroundColor: alpha('#3B82F6', 0.8),
        borderRadius: 8,
        maxBarThickness: 40,
      },
    ],
  };

  // Card delle statistiche moderne
  interface MetricCardProps {
    title: string;
    value: string | number;
    change: number;
    icon: React.ReactNode;
    gradient: string;
  }

  const MetricCard: React.FC<MetricCardProps> = ({ title, value, change, icon, gradient }) => (
    <AnimatedCard
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      sx={{
        height: '100%',
        background: gradient,
        color: 'white',
        position: 'relative',
        overflow: 'hidden',
        border: 'none',
        boxShadow: theme.shadows[10],
      }}
    >
      <CardContent sx={{ position: 'relative', zIndex: 1 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
          <Box
            sx={{
              width: 48,
              height: 48,
              borderRadius: '12px',
              backgroundColor: alpha('#FFFFFF', 0.2),
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            {icon}
          </Box>
          <IconButton size="small" sx={{ color: 'white', opacity: 0.7 }}>
            <MoreVertIcon fontSize="small" />
          </IconButton>
        </Box>
        
        <Typography variant="h3" sx={{ fontWeight: 700, mb: 1 }}>
          {value}
        </Typography>
        
        <Typography variant="body2" sx={{ opacity: 0.9, mb: 1 }}>
          {title}
        </Typography>
        
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
          {change > 0 ? (
            <ArrowUpwardIcon sx={{ fontSize: 16 }} />
          ) : (
            <ArrowDownwardIcon sx={{ fontSize: 16 }} />
          )}
          <Typography variant="caption" sx={{ fontWeight: 600 }}>
            {Math.abs(change)}%
          </Typography>
          <Typography variant="caption" sx={{ opacity: 0.7 }}>
            vs ultimo mese
          </Typography>
        </Box>
      </CardContent>
      
      {/* Decorative background element */}
      <Box
        sx={{
          position: 'absolute',
          top: -50,
          right: -50,
          width: 150,
          height: 150,
          borderRadius: '50%',
          backgroundColor: alpha('#FFFFFF', 0.1),
        }}
      />
    </AnimatedCard>
  );

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
        <LinearProgress sx={{ width: '50%' }} />
      </Box>
    );
  }

  return (
    <Box sx={{ backgroundColor: theme.palette.background.default, minHeight: '100vh', p: 3 }}>
      {/* Header con statistiche */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" sx={{ fontWeight: 700, mb: 1 }}>
          Dashboard Overview
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Benvenuto, {user?.username}. Ecco un riepilogo della situazione attuale.
        </Typography>
      </Box>

      {/* Metriche principali */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <MetricCard
            title="Vulnerabilità Totali"
            value={stats.totalVulnerabilities}
            change={12.5}
            icon={<BugReportIcon sx={{ fontSize: 24 }} />}
            gradient="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <MetricCard
            title="Vulnerabilità Critiche"
            value={stats.criticalVulnerabilities}
            change={-8.3}
            icon={<ErrorIcon sx={{ fontSize: 24 }} />}
            gradient="linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <MetricCard
            title="Host Monitorati"
            value={stats.totalHosts}
            change={5.2}
            icon={<ComputerIcon sx={{ fontSize: 24 }} />}
            gradient="linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <MetricCard
            title="Scansioni Recenti"
            value={stats.recentScans}
            change={15.7}
            icon={<SecurityIcon sx={{ fontSize: 24 }} />}
            gradient="linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
          />
        </Grid>
      </Grid>

      {/* Grafici */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {/* Grafico trend */}
        <Grid item xs={12} md={8}>
          <Card 
            sx={{ 
              height: '100%', 
              boxShadow: theme.shadows[2], 
              border: 'none',
              borderRadius: 2,
              overflow: 'hidden',
            }}
          >
            <Box 
              sx={{ 
                px: 3, 
                py: 2, 
                backgroundColor: theme.palette.mode === 'dark' 
                  ? alpha(theme.palette.background.paper, 0.6)
                  : alpha(theme.palette.primary.main, 0.05),
                borderBottom: `1px solid ${theme.palette.divider}`,
              }}
            >
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    Trend Vulnerabilità
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Andamento mensile delle vulnerabilità
                  </Typography>
                </Box>
                <IconButton size="small">
                  <MoreVertIcon />
                </IconButton>
              </Box>
            </Box>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ height: 300 }}>
                <Line
                  data={trendChartData}
                  options={{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                      legend: {
                        display: true,
                        position: 'top' as const,
                        labels: {
                          usePointStyle: true,
                          padding: 20,
                          font: {
                            size: 12,
                            family: 'Inter',
                          },
                        },
                      },
                      tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.9)',
                        padding: 12,
                        cornerRadius: 8,
                        titleFont: {
                          size: 14,
                          family: 'Inter',
                        },
                        bodyFont: {
                          size: 13,
                          family: 'Inter',
                        },
                      },
                    },
                    scales: {
                      x: {
                        grid: {
                          display: true,
                          color: theme.palette.mode === 'dark' 
                            ? 'rgba(255, 255, 255, 0.1)'
                            : 'rgba(0, 0, 0, 0.1)',
                        },
                        ticks: {
                          font: {
                            size: 12,
                            family: 'Inter',
                          },
                          color: theme.palette.text.secondary,
                        },
                      },
                      y: {
                        grid: {
                          display: true,
                          color: theme.palette.mode === 'dark' 
                            ? 'rgba(255, 255, 255, 0.1)'
                            : 'rgba(0, 0, 0, 0.1)',
                        },
                        ticks: {
                          font: {
                            size: 12,
                            family: 'Inter',
                          },
                          color: theme.palette.text.secondary,
                        },
                      },
                    },
                  }}
                />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Grafico distribuzione */}
        <Grid item xs={12} md={4}>
          <Card 
            sx={{ 
              height: '100%', 
              boxShadow: theme.shadows[2], 
              border: 'none',
              borderRadius: 2,
              overflow: 'hidden',
            }}
          >
            <Box 
              sx={{ 
                px: 3, 
                py: 2, 
                backgroundColor: theme.palette.mode === 'dark' 
                  ? alpha(theme.palette.background.paper, 0.6)
                  : alpha(theme.palette.info.main, 0.05),
                borderBottom: `1px solid ${theme.palette.divider}`,
              }}
            >
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    Distribuzione Severità
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Per livello di rischio
                  </Typography>
                </Box>
                <IconButton size="small">
                  <MoreVertIcon />
                </IconButton>
              </Box>
            </Box>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ height: 200, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                <Doughnut
                  data={vulnerabilityChartData}
                  options={{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                      legend: {
                        position: 'bottom' as const,
                        labels: {
                          padding: 20,
                          usePointStyle: true,
                          font: {
                            size: 12,
                            family: 'Inter',
                          },
                        },
                      },
                      tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.9)',
                        padding: 12,
                        cornerRadius: 8,
                        titleFont: {
                          size: 14,
                          family: 'Inter',
                        },
                        bodyFont: {
                          size: 13,
                          family: 'Inter',
                        },
                      },
                    },
                    cutout: '70%',
                  }}
                />
              </Box>
              <Box sx={{ textAlign: 'center', mt: 2 }}>
                <Typography variant="h4" sx={{ fontWeight: 700 }}>
                  {stats.totalVulnerabilities}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Totale Vulnerabilità
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Sezione inferiore */}
      <Grid container spacing={3}>
        {/* Attività settimanale */}
        <Grid item xs={12} md={4}>
          <Card 
            sx={{ 
              height: '100%', 
              boxShadow: theme.shadows[2], 
              border: 'none',
              borderRadius: 2,
              overflow: 'hidden',
            }}
          >
            <Box 
              sx={{ 
                px: 3, 
                py: 2, 
                backgroundColor: theme.palette.mode === 'dark' 
                  ? alpha(theme.palette.background.paper, 0.6)
                  : alpha(theme.palette.success.main, 0.05),
                borderBottom: `1px solid ${theme.palette.divider}`,
              }}
            >
              <Typography variant="h6" sx={{ fontWeight: 600 }}>
                Attività Settimanale
              </Typography>
            </Box>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ height: 200 }}>
                <Bar
                  data={barChartData}
                  options={{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                      legend: {
                        display: false,
                      },
                      tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.9)',
                        padding: 12,
                        cornerRadius: 8,
                        titleFont: {
                          size: 14,
                          family: 'Inter',
                        },
                        bodyFont: {
                          size: 13,
                          family: 'Inter',
                        },
                      },
                    },
                    scales: {
                      x: {
                        grid: {
                          display: true,
                          color: theme.palette.mode === 'dark' 
                            ? 'rgba(255, 255, 255, 0.1)'
                            : 'rgba(0, 0, 0, 0.1)',
                        },
                        ticks: {
                          font: {
                            size: 12,
                            family: 'Inter',
                          },
                          color: theme.palette.text.secondary,
                        },
                      },
                      y: {
                        grid: {
                          display: true,
                          color: theme.palette.mode === 'dark' 
                            ? 'rgba(255, 255, 255, 0.1)'
                            : 'rgba(0, 0, 0, 0.1)',
                        },
                        ticks: {
                          font: {
                            size: 12,
                            family: 'Inter',
                          },
                          color: theme.palette.text.secondary,
                        },
                      },
                    },
                  }}
                />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Host più vulnerabili */}
        <Grid item xs={12} md={4}>
          <Card sx={{ height: '100%', boxShadow: theme.shadows[4], border: 'none' }}>
            <CardContent>
              <Typography variant="h6" sx={{ fontWeight: 600, mb: 3 }}>
                Host Critici
              </Typography>
              <Box sx={{ mt: 2 }}>
                {['web-server-01', 'db-server-02', 'app-server-03', 'mail-server-01'].map((host, index) => (
                  <Box key={host} sx={{ mb: 3 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                      <Typography variant="body2" sx={{ fontWeight: 500 }}>
                        {host}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {[85, 72, 65, 58][index]}%
                      </Typography>
                    </Box>
                    <LinearProgress
                      variant="determinate"
                      value={[85, 72, 65, 58][index]}
                      sx={{
                        height: 8,
                        borderRadius: 4,
                        backgroundColor: alpha(theme.palette.primary.main, 0.1),
                        '& .MuiLinearProgress-bar': {
                          borderRadius: 4,
                          backgroundColor: index === 0 ? '#FF6B6B' : index === 1 ? '#FFA94D' : '#4ECDC4',
                        },
                      }}
                    />
                  </Box>
                ))}
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Attività recenti */}
        <Grid item xs={12} md={4}>
          <Card sx={{ height: '100%', boxShadow: theme.shadows[4], border: 'none' }}>
            <CardContent>
              <Typography variant="h6" sx={{ fontWeight: 600, mb: 3 }}>
                Attività Recenti
              </Typography>
              <Box sx={{ mt: 2 }}>
                {recentActivities.map((activity) => (
                  <Box
                    key={activity.id}
                    sx={{
                      p: 2,
                      mb: 2,
                      borderRadius: 2,
                      backgroundColor: alpha(theme.palette.primary.main, 0.05),
                      border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}`,
                      transition: 'all 0.3s',
                      '&:hover': {
                        backgroundColor: alpha(theme.palette.primary.main, 0.08),
                        transform: 'translateY(-2px)',
                      },
                    }}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Avatar
                        sx={{
                          width: 32,
                          height: 32,
                          backgroundColor: 
                            activity.type === 'scan' ? alpha('#3B82F6', 0.1) :
                            activity.type === 'vulnerability' ? alpha('#EF4444', 0.1) :
                            alpha('#10B981', 0.1),
                          color:
                            activity.type === 'scan' ? '#3B82F6' :
                            activity.type === 'vulnerability' ? '#EF4444' :
                            '#10B981',
                          mr: 1.5,
                        }}
                      >
                        {activity.type === 'scan' ? <SecurityIcon sx={{ fontSize: 18 }} /> :
                         activity.type === 'vulnerability' ? <BugReportIcon sx={{ fontSize: 18 }} /> :
                         <AssignmentIcon sx={{ fontSize: 18 }} />}
                      </Avatar>
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="body2" sx={{ fontWeight: 600 }}>
                          {activity.title}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {activity.timestamp}
                        </Typography>
                      </Box>
                    </Box>
                    <Typography variant="caption" color="text.secondary">
                      {activity.description}
                    </Typography>
                  </Box>
                ))}
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
}