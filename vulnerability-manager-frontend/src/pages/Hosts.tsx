import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  IconButton,
  TextField,
  InputAdornment,
  Chip,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  Tooltip,
  LinearProgress,
} from '@mui/material';
import { DataGrid, GridColDef, GridRenderCellParams } from '@mui/x-data-grid';
import {
  Add as AddIcon,
  Search as SearchIcon,
  Computer as ComputerIcon,
  Security as SecurityIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Refresh as RefreshIcon,
} from '@mui/icons-material';
import { api } from '../api/api';
import type { Host } from '../types';

const Hosts: React.FC = () => {
  const [hosts, setHosts] = useState<Host[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [openDialog, setOpenDialog] = useState(false);
  const [formData, setFormData] = useState({
    hostname: '',
    ip_address: '',
    os: '',
    description: '',
  });
  const [error, setError] = useState<string | null>(null);
  const [scanning, setScanning] = useState(false);

  useEffect(() => {
    fetchHosts();
  }, []);

  const fetchHosts = async () => {
    try {
      setLoading(true);
      const response = await api.get('/hosts');
      setHosts(response.data);
    } catch (err) {
      setError('Errore nel caricamento degli host');
      console.error('Error fetching hosts:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleScan = async () => {
    try {
      setScanning(true);
      await api.post('/hosts/scan');
      fetchHosts();
    } catch (err) {
      setError('Errore durante la scansione');
      console.error('Error scanning hosts:', err);
    } finally {
      setScanning(false);
    }
  };

  const handleSubmit = async () => {
    try {
      await api.post('/hosts', formData);
      setOpenDialog(false);
      setFormData({
        hostname: '',
        ip_address: '',
        os: '',
        description: '',
      });
      fetchHosts();
    } catch (err) {
      setError('Errore nel salvataggio dell\'host');
      console.error('Error saving host:', err);
    }
  };

  const getStatusIcon = (vulnerabilityCount: number) => {
    if (vulnerabilityCount === 0) {
      return <CheckCircleIcon color="success" />;
    } else if (vulnerabilityCount < 5) {
      return <WarningIcon color="warning" />;
    } else {
      return <ErrorIcon color="error" />;
    }
  };

  const getStatusColor = (vulnerabilityCount: number) => {
    if (vulnerabilityCount === 0) return 'success';
    if (vulnerabilityCount < 5) return 'warning';
    return 'error';
  };

  const filteredHosts = hosts.filter(host =>
    host.hostname.toLowerCase().includes(searchTerm.toLowerCase()) ||
    host.ip_address.includes(searchTerm) ||
    host.os?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const columns: GridColDef[] = [
    {
      field: 'status',
      headerName: 'Stato',
      width: 80,
      renderCell: (params: GridRenderCellParams) => (
        <Tooltip title={`${params.row.vulnerability_count || 0} vulnerabilità`}>
          {getStatusIcon(params.row.vulnerability_count || 0)}
        </Tooltip>
      ),
    },
    {
      field: 'hostname',
      headerName: 'Hostname',
      width: 250,
      renderCell: (params: GridRenderCellParams) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <ComputerIcon fontSize="small" color="action" />
          {params.value}
        </Box>
      ),
    },
    {
      field: 'ip_address',
      headerName: 'Indirizzo IP',
      width: 150,
    },
    {
      field: 'os',
      headerName: 'Sistema Operativo',
      width: 200,
      renderCell: (params: GridRenderCellParams) => (
        params.value || <Typography color="text.secondary">N/D</Typography>
      ),
    },
    {
      field: 'vulnerability_count',
      headerName: 'Vulnerabilità',
      width: 150,
      renderCell: (params: GridRenderCellParams) => {
        const count = params.value || 0;
        return (
          <Chip
            icon={<SecurityIcon />}
            label={count}
            color={getStatusColor(count)}
            size="small"
          />
        );
      },
    },
    {
      field: 'last_scan',
      headerName: 'Ultima Scansione',
      width: 180,
      renderCell: (params: GridRenderCellParams) => {
        if (!params.value) {
          return <Typography color="text.secondary">Mai scansionato</Typography>;
        }
        return new Date(params.value).toLocaleString('it-IT');
      },
    },
    {
      field: 'description',
      headerName: 'Descrizione',
      flex: 1,
      renderCell: (params: GridRenderCellParams) => (
        params.value || <Typography color="text.secondary">-</Typography>
      ),
    },
  ];

  const stats = {
    total: hosts.length,
    secure: hosts.filter(h => (h.vulnerability_count || 0) === 0).length,
    warning: hosts.filter(h => (h.vulnerability_count || 0) > 0 && (h.vulnerability_count || 0) < 5).length,
    critical: hosts.filter(h => (h.vulnerability_count || 0) >= 5).length,
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
        <Typography variant="h4" component="h1">
          Gestione Host
        </Typography>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            startIcon={<RefreshIcon />}
            onClick={handleScan}
            disabled={scanning}
          >
            Avvia Scansione
          </Button>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => setOpenDialog(true)}
          >
            Aggiungi Host
          </Button>
        </Box>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {scanning && (
        <Box sx={{ mb: 2 }}>
          <Alert severity="info">
            Scansione in corso...
          </Alert>
          <LinearProgress sx={{ mt: 1 }} />
        </Box>
      )}

      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                Host Totali
              </Typography>
              <Typography variant="h4">
                {stats.total}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                Host Sicuri
              </Typography>
              <Typography variant="h4" color="success.main">
                {stats.secure}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                Attenzione
              </Typography>
              <Typography variant="h4" color="warning.main">
                {stats.warning}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                Critici
              </Typography>
              <Typography variant="h4" color="error.main">
                {stats.critical}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Card>
        <CardContent>
          <Box sx={{ mb: 2 }}>
            <TextField
              fullWidth
              variant="outlined"
              placeholder="Cerca host..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
            />
          </Box>

          <DataGrid
            rows={filteredHosts}
            columns={columns}
            initialState={{
              pagination: {
                paginationModel: { pageSize: 10 },
              },
            }}
            pageSizeOptions={[10, 25, 50]}
            checkboxSelection
            disableRowSelectionOnClick
            autoHeight
            loading={loading}
            sx={{
              '& .MuiDataGrid-cell:focus': {
                outline: 'none',
              },
            }}
          />
        </CardContent>
      </Card>

      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Aggiungi Nuovo Host</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>
            <TextField
              fullWidth
              label="Hostname"
              value={formData.hostname}
              onChange={(e) => setFormData({ ...formData, hostname: e.target.value })}
              required
            />
            <TextField
              fullWidth
              label="Indirizzo IP"
              value={formData.ip_address}
              onChange={(e) => setFormData({ ...formData, ip_address: e.target.value })}
              required
              placeholder="192.168.1.1"
            />
            <TextField
              fullWidth
              label="Sistema Operativo"
              value={formData.os}
              onChange={(e) => setFormData({ ...formData, os: e.target.value })}
              placeholder="Windows Server 2019, Ubuntu 20.04, etc."
            />
            <TextField
              fullWidth
              label="Descrizione"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              multiline
              rows={3}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)}>Annulla</Button>
          <Button onClick={handleSubmit} variant="contained">
            Aggiungi
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Hosts;