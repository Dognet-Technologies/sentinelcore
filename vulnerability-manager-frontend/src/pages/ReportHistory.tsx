import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  IconButton,
  TextField,
  InputAdornment,
  Chip,
  Tooltip,
  Menu,
  MenuItem,
} from '@mui/material';
import { DataGrid, GridColDef, GridRenderCellParams } from '@mui/x-data-grid';
import {
  Search as SearchIcon,
  Download as DownloadIcon,
  Visibility as VisibilityIcon,
  MoreVert as MoreVertIcon,
  PictureAsPdf as PdfIcon,
  Code as JsonIcon,
  Language as HtmlIcon,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { api } from '../api/api';

interface Report {
  id: number;
  title: string;
  description?: string;
  format: 'pdf' | 'html' | 'json';
  severity: 'low' | 'medium' | 'high' | 'critical';
  host_count: number;
  vulnerability_count: number;
  created_by: string;
  created_at: string;
  file_url?: string;
}

const ReportHistory: React.FC = () => {
  const navigate = useNavigate();
  const [reports, setReports] = useState<Report[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedReport, setSelectedReport] = useState<Report | null>(null);

  useEffect(() => {
    fetchReports();
  }, []);

  const fetchReports = async () => {
    try {
      setLoading(true);
      const response = await api.get('/reports');
      setReports(response.data);
    } catch (err) {
      console.error('Error fetching reports:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, report: Report) => {
    setAnchorEl(event.currentTarget);
    setSelectedReport(report);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedReport(null);
  };

  const handleDownload = async (report: Report) => {
    try {
      const response = await api.get(`/reports/${report.id}/download`, {
        responseType: 'blob',
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `${report.title}.${report.format}`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (err) {
      console.error('Error downloading report:', err);
    }
  };

  const getFormatIcon = (format: string) => {
    switch (format) {
      case 'pdf':
        return <PdfIcon />;
      case 'html':
        return <HtmlIcon />;
      case 'json':
        return <JsonIcon />;
      default:
        return null;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'error';
      case 'high':
        return 'warning';
      case 'medium':
        return 'info';
      case 'low':
        return 'success';
      default:
        return 'default';
    }
  };

  const filteredReports = reports.filter(report =>
    report.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    report.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    report.created_by.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const columns: GridColDef[] = [
    {
      field: 'title',
      headerName: 'Titolo',
      flex: 1,
      renderCell: (params: GridRenderCellParams) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          {getFormatIcon(params.row.format)}
          <Typography variant="body2">{params.value}</Typography>
        </Box>
      ),
    },
    {
      field: 'severity',
      headerName: 'Severità',
      width: 120,
      renderCell: (params: GridRenderCellParams) => (
        <Chip
          label={params.value}
          color={getSeverityColor(params.value)}
          size="small"
        />
      ),
    },
    {
      field: 'host_count',
      headerName: 'Host',
      width: 100,
      renderCell: (params: GridRenderCellParams) => (
        <Chip label={params.value} size="small" variant="outlined" />
      ),
    },
    {
      field: 'vulnerability_count',
      headerName: 'Vulnerabilità',
      width: 120,
      renderCell: (params: GridRenderCellParams) => (
        <Chip 
          label={params.value} 
          size="small" 
          color={params.value > 10 ? 'error' : params.value > 5 ? 'warning' : 'default'}
        />
      ),
    },
    {
      field: 'created_by',
      headerName: 'Creato da',
      width: 150,
    },
    {
      field: 'created_at',
      headerName: 'Data Creazione',
      width: 180,
      valueFormatter: (params) => {
        return new Date(params.value).toLocaleString('it-IT');
      },
    },
    {
      field: 'actions',
      headerName: 'Azioni',
      width: 120,
      sortable: false,
      renderCell: (params: GridRenderCellParams) => (
        <Box>
          <Tooltip title="Visualizza">
            <IconButton
              size="small"
              onClick={() => navigate(`/reports/${params.row.id}`)}
            >
              <VisibilityIcon fontSize="small" />
            </IconButton>
          </Tooltip>
          <Tooltip title="Download">
            <IconButton
              size="small"
              onClick={() => handleDownload(params.row as Report)}
            >
              <DownloadIcon fontSize="small" />
            </IconButton>
          </Tooltip>
          <IconButton
            size="small"
            onClick={(e) => handleMenuOpen(e, params.row as Report)}
          >
            <MoreVertIcon fontSize="small" />
          </IconButton>
        </Box>
      ),
    },
  ];

  return (
    <Box>
      <Typography variant="h4" component="h1" gutterBottom>
        Storico Report
      </Typography>

      <Card>
        <CardContent>
          <Box sx={{ mb: 2 }}>
            <TextField
              fullWidth
              variant="outlined"
              placeholder="Cerca report..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
            />
          </Box>

          <DataGrid
            rows={filteredReports}
            columns={columns}
            initialState={{
              pagination: {
                paginationModel: { pageSize: 10 },
              },
            }}
            pageSizeOptions={[10, 25, 50]}
            checkboxSelection
            disableRowSelectionOnClick
            autoHeight
            loading={loading}
            sx={{
              '& .MuiDataGrid-cell:focus': {
                outline: 'none',
              },
            }}
          />
        </CardContent>
      </Card>

      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={() => {
          if (selectedReport) {
            navigate(`/reports/${selectedReport.id}/edit`);
          }
          handleMenuClose();
        }}>
          Modifica
        </MenuItem>
        <MenuItem onClick={() => {
          if (selectedReport) {
            // Implementare logica di invio
            console.log('Invia report:', selectedReport);
          }
          handleMenuClose();
        }}>
          Invia via Email
        </MenuItem>
        <MenuItem onClick={() => {
          if (selectedReport) {
            // Implementare logica di duplicazione
            console.log('Duplica report:', selectedReport);
          }
          handleMenuClose();
        }}>
          Duplica
        </MenuItem>
        <MenuItem onClick={() => {
          if (selectedReport) {
            // Implementare logica di eliminazione
            if (window.confirm('Sei sicuro di voler eliminare questo report?')) {
              api.delete(`/reports/${selectedReport.id}`).then(() => {
                fetchReports();
              });
            }
          }
          handleMenuClose();
        }} sx={{ color: 'error.main' }}>
          Elimina
        </MenuItem>
      </Menu>
    </Box>
  );
};

export default ReportHistory;