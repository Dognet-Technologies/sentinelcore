// src/utils/validators.ts
export const validators = {
  email: (value: string): boolean => {
    const re = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
    return re.test(value);
  },

  ipAddress: (value: string): boolean => {
    const re = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    return re.test(value);
  },

  url: (value: string): boolean => {
    try {
      new URL(value);
      return true;
    } catch {
      return false;
    }
  },

  port: (value: string | number): boolean => {
    const port = typeof value === 'string' ? parseInt(value, 10) : value;
    return !isNaN(port) && port > 0 && port <= 65535;
  },

  cveId: (value: string): boolean => {
    const re = /^CVE-\d{4}-\d{4,}$/;
    return re.test(value);
  },

  password: (value: string): { valid: boolean; errors: string[] } => {
    const errors: string[] = [];
    
    if (value.length < 8) {
      errors.push('La password deve contenere almeno 8 caratteri');
    }
    if (!/[A-Z]/.test(value)) {
      errors.push('La password deve contenere almeno una lettera maiuscola');
    }
    if (!/[a-z]/.test(value)) {
      errors.push('La password deve contenere almeno una lettera minuscola');
    }
    if (!/[0-9]/.test(value)) {
      errors.push('La password deve contenere almeno un numero');
    }
    if (!/[!@#$%^&*]/.test(value)) {
      errors.push('La password deve contenere almeno un carattere speciale');
    }
    
    return {
      valid: errors.length === 0,
      errors
    };
  }
};
