// src/components/vulnerabilities/VulnerabilityForm.tsx
import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  IconButton,
  Alert,
} from '@mui/material';
import { Close as CloseIcon } from '@mui/icons-material';
import { useForm, Controller } from 'react-hook-form';
import { useMutation } from '@tanstack/react-query';

import { vulnerabilitiesApi } from '../../api/vulnerabilities';
import { assetsApi } from '../../api/assets';
import { 
  Vulnerability, 
  VulnerabilitySeverity,
  Asset 
} from '../../types';
import { useQuery } from '@tanstack/react-query';

interface VulnerabilityFormProps {
  open: boolean;
  onClose: () => void;
  onSuccess: () => void;
  vulnerability?: Vulnerability;
}

interface FormData {
  title: string;
  description: string;
  cvss_score: number;
  epss_score: number | null;
  ip_address: string;
  hostname: string;
  port: number | null;
  protocol: string;
  cve_id: string;
  cwe_id: string;
  remediation: string;
  source: string;
  asset_id: string;
}

const VulnerabilityForm: React.FC<VulnerabilityFormProps> = ({
  open,
  onClose,
  onSuccess,
  vulnerability,
}) => {
  const isEdit = !!vulnerability;

  const { data: assets = [] } = useQuery({
    queryKey: ['assets'],
    queryFn: () => assetsApi.list(),
  });

  const {
    control,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<FormData>({
    defaultValues: {
      title: vulnerability?.title || '',
      description: vulnerability?.description || '',
      cvss_score: vulnerability?.cvss_score || 0,
      epss_score: vulnerability?.epss_score || null,
      ip_address: vulnerability?.ip_address || '',
      hostname: vulnerability?.hostname || '',
      port: vulnerability?.port || null,
      protocol: vulnerability?.protocol || '',
      cve_id: vulnerability?.cve_id || '',
      cwe_id: vulnerability?.cwe_id || '',
      remediation: vulnerability?.remediation || '',
      source: vulnerability?.source || 'Manual',
      asset_id: vulnerability?.asset_id || '',
    },
  });

  const cvssScore = watch('cvss_score');

  const mutation = useMutation({
    mutationFn: (data: any) => {
      if (isEdit) {
        return vulnerabilitiesApi.update(vulnerability.id, data);
      } else {
        return vulnerabilitiesApi.create(data);
      }
    },
    onSuccess: () => {
      onSuccess();
    },
  });

  const onSubmit = (data: FormData) => {
    const payload = {
      ...data,
      epss_score: data.epss_score || undefined,
      port: data.port || undefined,
      hostname: data.hostname || undefined,
      protocol: data.protocol || undefined,
      cve_id: data.cve_id || undefined,
      cwe_id: data.cwe_id || undefined,
      remediation: data.remediation || undefined,
      asset_id: data.asset_id || undefined,
    };

    mutation.mutate(payload);
  };

  const getSeverityFromScore = (score: number): VulnerabilitySeverity => {
    if (score >= 9.0) return VulnerabilitySeverity.Critical;
    if (score >= 7.0) return VulnerabilitySeverity.High;
    if (score >= 4.0) return VulnerabilitySeverity.Medium;
    if (score >= 0.1) return VulnerabilitySeverity.Low;
    return VulnerabilitySeverity.Info;
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          {isEdit ? 'Modifica Vulnerabilità' : 'Nuova Vulnerabilità'}
          <IconButton onClick={onClose}>
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <form onSubmit={handleSubmit(onSubmit)}>
        <DialogContent dividers>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Controller
                name="title"
                control={control}
                rules={{ required: 'Titolo richiesto' }}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="Titolo"
                    fullWidth
                    error={!!errors.title}
                    helperText={errors.title?.message}
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="description"
                control={control}
                rules={{ required: 'Descrizione richiesta' }}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="Descrizione"
                    fullWidth
                    multiline
                    rows={4}
                    error={!!errors.description}
                    helperText={errors.description?.message}
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="cvss_score"
                control={control}
                rules={{ 
                  required: 'CVSS Score richiesto',
                  min: { value: 0, message: 'Minimo 0' },
                  max: { value: 10, message: 'Massimo 10' }
                }}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="CVSS Score"
                    type="number"
                    fullWidth
                    inputProps={{ step: 0.1 }}
                    error={!!errors.cvss_score}
                    helperText={errors.cvss_score?.message}
                  />
                )}
              />
              {cvssScore > 0 && (
                <Box mt={1}>
                  <Alert severity="info">
                    Severità: {getSeverityFromScore(cvssScore)}
                  </Alert>
                </Box>
              )}
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="epss_score"
                control={control}
                rules={{
                  min: { value: 0, message: 'Minimo 0' },
                  max: { value: 1, message: 'Massimo 1' }
                }}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="EPSS Score (0-1)"
                    type="number"
                    fullWidth
                    inputProps={{ step: 0.01 }}
                    error={!!errors.epss_score}
                    helperText={errors.epss_score?.message}
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="ip_address"
                control={control}
                rules={{ required: 'IP Address richiesto' }}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="IP Address"
                    fullWidth
                    error={!!errors.ip_address}
                    helperText={errors.ip_address?.message}
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="hostname"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="Hostname"
                    fullWidth
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="port"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="Porta"
                    type="number"
                    fullWidth
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="protocol"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="Protocollo"
                    fullWidth
                    placeholder="es. TCP, UDP"
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="cve_id"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="CVE ID"
                    fullWidth
                    placeholder="es. CVE-2023-12345"
                  />
                )}
              />
            </Grid>

            <Grid item xs={6}>
              <Controller
                name="cwe_id"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="CWE ID"
                    fullWidth
                    placeholder="es. CWE-79"
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="asset_id"
                control={control}
                render={({ field }) => (
                  <FormControl fullWidth>
                    <InputLabel>Asset Associato</InputLabel>
                    <Select {...field} label="Asset Associato">
                      <MenuItem value="">
                        <em>Nessuno</em>
                      </MenuItem>
                      {assets.map((asset) => (
                        <MenuItem key={asset.id} value={asset.id}>
                          {asset.name} ({asset.ip_address || asset.hostname})
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="remediation"
                control={control}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="Remediation"
                    fullWidth
                    multiline
                    rows={3}
                    placeholder="Descrivi come risolvere questa vulnerabilità"
                  />
                )}
              />
            </Grid>

            <Grid item xs={12}>
              <Controller
                name="source"
                control={control}
                rules={{ required: 'Fonte richiesta' }}
                render={({ field }) => (
                  <TextField
                    {...field}
                    label="Fonte"
                    fullWidth
                    error={!!errors.source}
                    helperText={errors.source?.message}
                    placeholder="es. Nessus, OpenVAS, Manual"
                  />
                )}
              />
            </Grid>
          </Grid>

          {mutation.isError && (
            <Alert severity="error" sx={{ mt: 2 }}>
              Errore durante il salvataggio
            </Alert>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={onClose}>Annulla</Button>
          <Button
            type="submit"
            variant="contained"
            disabled={mutation.isPending}
          >
            {mutation.isPending ? 'Salvataggio...' : 'Salva'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};
export default VulnerabilityForm;