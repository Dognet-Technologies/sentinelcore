// src/components/vulnerabilities/VulnerabilityDetail.tsx
import React from 'react';
import {
  Box,
  Paper,
  Typography,
  Chip,
  Button,
  Divider,
  Grid,
  IconButton,
  Skeleton,
  Alert,
  List,
  ListItem,
  ListItemText,
  useTheme,
} from '@mui/material';
import {
  Close as CloseIcon,
  Edit as EditIcon,
  Assignment as AssignmentIcon,
  History as HistoryIcon,
} from '@mui/icons-material';
import { useQuery } from '@tanstack/react-query';
import { format } from 'date-fns';

import { vulnerabilitiesApi } from '../../api/vulnerabilities';
import { useAuth } from '../../contexts/AuthContext';
import { VulnerabilitySeverity, VulnerabilityStatus } from '../../types';

interface VulnerabilityDetailProps {
  vulnerabilityId: string;
  onClose: () => void;
}

const VulnerabilityDetail: React.FC<VulnerabilityDetailProps> = ({
  vulnerabilityId,
  onClose,
}) => {
  const theme = useTheme();
  const { user } = useAuth();
  const isAdmin = user?.role === 'admin';

  const { data: vulnerability, isLoading } = useQuery({
    queryKey: ['vulnerability', vulnerabilityId],
    queryFn: () => vulnerabilitiesApi.get(vulnerabilityId),
    enabled: !!vulnerabilityId,
  });

  const getSeverityColor = (severity: VulnerabilitySeverity) => {
    return theme.severity[severity.toLowerCase() as keyof typeof theme.severity];
  };

  const getStatusColor = (status: VulnerabilityStatus) => {
    const statusKey = status.replace('_', '') as keyof typeof theme.status;
    return theme.status[statusKey];
  };

  if (isLoading) {
    return (
      <Paper sx={{ p: 3 }}>
        <Skeleton variant="text" height={40} />
        <Skeleton variant="text" />
        <Skeleton variant="text" />
        <Skeleton variant="rectangular" height={200} sx={{ mt: 2 }} />
      </Paper>
    );
  }

  if (!vulnerability) {
    return (
      <Paper sx={{ p: 3 }}>
        <Alert severity="error">Vulnerabilit√† non trovata</Alert>
      </Paper>
    );
  }

  return (
    <Paper sx={{ p: 3, height: '100%', overflow: 'auto' }}>
      <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={2}>
        <Box flex={1}>
          <Typography variant="h5" gutterBottom>
            {vulnerability.title}
          </Typography>
          <Box display="flex" gap={1} flexWrap="wrap">
            <Chip
              label={vulnerability.severity}
              size="small"
              sx={{
                backgroundColor: getSeverityColor(vulnerability.severity),
                color: 'white',
                fontWeight: 'bold',
              }}
            />
            <Chip
              label={vulnerability.status}
              size="small"
              variant="outlined"
              sx={{
                borderColor: getStatusColor(vulnerability.status),
                color: getStatusColor(vulnerability.status),
              }}
            />
            {vulnerability.cve_id && (
              <Chip label={vulnerability.cve_id} size="small" variant="outlined" />
            )}
          </Box>
        </Box>
        <IconButton onClick={onClose}>
          <CloseIcon />
        </IconButton>
      </Box>

      <Divider sx={{ my: 2 }} />

      {/* Scores */}
      <Grid container spacing={2} sx={{ mb: 3 }}>
        <Grid item xs={6}>
          <Box
            sx={{
              p: 2,
              borderRadius: 1,
              backgroundColor: 'background.default',
              textAlign: 'center',
            }}
          >
            <Typography variant="h4" color="primary">
              {vulnerability.cvss_score}
            </Typography>
            <Typography variant="body2" color="textSecondary">
              CVSS Score
            </Typography>
          </Box>
        </Grid>
        <Grid item xs={6}>
          <Box
            sx={{
              p: 2,
              borderRadius: 1,
              backgroundColor: 'background.default',
              textAlign: 'center',
            }}
          >
            <Typography variant="h4" color="secondary">
              {vulnerability.epss_score
                ? `${(vulnerability.epss_score * 100).toFixed(1)}%`
                : 'N/A'}
            </Typography>
            <Typography variant="body2" color="textSecondary">
              EPSS Score
            </Typography>
          </Box>
        </Grid>
      </Grid>

      {/* Details */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          Dettagli
        </Typography>
        <List dense>
          <ListItem>
            <ListItemText
              primary="IP Address"
              secondary={vulnerability.ip_address}
            />
          </ListItem>
          {vulnerability.hostname && (
            <ListItem>
              <ListItemText
                primary="Hostname"
                secondary={vulnerability.hostname}
              />
            </ListItem>
          )}
          {vulnerability.port && (
            <ListItem>
              <ListItemText
                primary="Porta"
                secondary={`${vulnerability.port}${
                  vulnerability.protocol ? ` (${vulnerability.protocol})` : ''
                }`}
              />
            </ListItem>
          )}
          <ListItem>
            <ListItemText
              primary="Fonte"
              secondary={vulnerability.source}
            />
          </ListItem>
          <ListItem>
            <ListItemText
              primary="Scoperta il"
              secondary={format(new Date(vulnerability.discovered_at), 'dd/MM/yyyy HH:mm')}
            />
          </ListItem>
          {vulnerability.cwe_id && (
            <ListItem>
              <ListItemText
                primary="CWE ID"
                secondary={vulnerability.cwe_id}
              />
            </ListItem>
          )}
        </List>
      </Box>

      {/* Description */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          Descrizione
        </Typography>
        <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap' }}>
          {vulnerability.description}
        </Typography>
      </Box>

      {/* Remediation */}
      {vulnerability.remediation && (
        <Box sx={{ mb: 3 }}>
          <Typography variant="h6" gutterBottom>
            Remediation
          </Typography>
          <Alert severity="info" sx={{ mt: 1 }}>
            <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap' }}>
              {vulnerability.remediation}
            </Typography>
          </Alert>
        </Box>
      )}

      {/* Team Assignment */}
      {vulnerability.assigned_team_id && (
        <Box sx={{ mb: 3 }}>
          <Typography variant="h6" gutterBottom>
            Team Assegnato
          </Typography>
          <Chip
            label="Team Security" // In a real app, fetch team name
            icon={<AssignmentIcon />}
            color="primary"
            variant="outlined"
          />
        </Box>
      )}

      {/* Actions */}
      {isAdmin && (
        <Box display="flex" gap={1} mt={3}>
          <Button
            fullWidth
            variant="contained"
            startIcon={<EditIcon />}
            onClick={() => {
              // Handle edit
            }}
          >
            Modifica
          </Button>
          <Button
            fullWidth
            variant="outlined"
            startIcon={<HistoryIcon />}
            onClick={() => {
              // Show history
            }}
          >
            Cronologia
          </Button>
        </Box>
      )}
    </Paper>
  );
};
export default VulnerabilityDetail;