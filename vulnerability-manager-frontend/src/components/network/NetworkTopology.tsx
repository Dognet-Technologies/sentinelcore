// src/components/network/NetworkTopology.tsx
import React, { useEffect, useRef, useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Card,
  CardContent,
  Button,
  IconButton,
  Tooltip,
  Chip,
  CircularProgress,
  TextField,
  Alert,
} from '@mui/material';
import {
  ZoomIn as ZoomInIcon,
  ZoomOut as ZoomOutIcon,
  CenterFocusStrong as CenterIcon,
  Refresh as RefreshIcon,
} from '@mui/icons-material';
import cytoscape from 'cytoscape';
import { useMutation } from '@tanstack/react-query';
import { pluginsApi } from '../../api/plugins';

interface NetworkTopologyProps {
  pluginId: string;
}

const NetworkTopology: React.FC<NetworkTopologyProps> = ({ pluginId }) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const cyRef = useRef<cytoscape.Core | null>(null);
  const [selectedNode, setSelectedNode] = useState<any>(null);
  const [network, setNetwork] = useState('192.168.1.0/24');

  const scanMutation = useMutation({
    mutationFn: () => 
      pluginsApi.execute(pluginId, 'scan', { network, max_workers: 50 }),
    onSuccess: (data) => {
      if (data.topology) {
        renderTopology(data.topology);
      }
    },
  });

  const renderTopology = (topology: any) => {
    if (!containerRef.current) return;

    // Initialize Cytoscape
    const cy = cytoscape({
      container: containerRef.current,
      elements: [
        ...topology.nodes.map((node: any) => ({
          data: { ...node },
          classes: node.type,
        })),
        ...topology.edges.map((edge: any) => ({
          data: edge,
        })),
      ],
      style: [
        {
          selector: 'node',
          style: {
            'label': 'data(label)',
            'text-valign': 'center',
            'text-halign': 'center',
            'background-color': '#666',
            'color': '#fff',
            'text-outline-color': '#666',
            'text-outline-width': 2,
            'font-size': 12,
            'width': 40,
            'height': 40,
          },
        },
        {
          selector: 'node.subnet',
          style: {
            'background-color': '#2196F3',
            'shape': 'round-rectangle',
            'width': 80,
            'height': 80,
            'font-size': 14,
            'font-weight': 'bold',
          },
        },
        {
          selector: 'node.host',
          style: {
            'background-color': '#4CAF50',
            'shape': 'ellipse',
          },
        },
        {
          selector: 'edge',
          style: {
            'width': 2,
            'line-color': '#ccc',
            'target-arrow-color': '#ccc',
            'target-arrow-shape': 'triangle',
            'curve-style': 'bezier',
          },
        },
        {
          selector: ':selected',
          style: {
            'background-color': '#FF9800',
            'line-color': '#FF9800',
            'target-arrow-color': '#FF9800',
          },
        },
      ],
      layout: {
        name: 'cose',
        animate: true,
        animationDuration: 1000,
        nodeRepulsion: () => 8000,
        idealEdgeLength: () => 100,
        edgeElasticity: () => 100,
        nestingFactor: 5,
        gravity: 80,
        numIter: 1000,
        initialTemp: 200,
        coolingFactor: 0.95,
        minTemp: 1.0,
      },
    });

    // Event handlers
    cy.on('tap', 'node', (event) => {
      const node = event.target;
      setSelectedNode(node.data());
    });

    // Store reference
    cyRef.current = cy;
  };

  const handleZoomIn = () => {
    if (cyRef.current) {
      cyRef.current.zoom(cyRef.current.zoom() * 1.2);
    }
  };

  const handleZoomOut = () => {
    if (cyRef.current) {
      cyRef.current.zoom(cyRef.current.zoom() * 0.8);
    }
  };

  const handleCenter = () => {
    if (cyRef.current) {
      cyRef.current.fit();
    }
  };

  const handleScan = () => {
    scanMutation.mutate();
  };

  return (
    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* Controls */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <TextField
            size="small"
            label="Network"
            value={network}
            onChange={(e) => setNetwork(e.target.value)}
            placeholder="192.168.1.0/24"
            sx={{ width: 200 }}
          />
          <Button
            variant="contained"
            startIcon={scanMutation.isPending ? <CircularProgress size={20} /> : <RefreshIcon />}
            onClick={handleScan}
            disabled={scanMutation.isPending}
          >
            Scan Network
          </Button>
          <Box sx={{ flexGrow: 1 }} />
          <Tooltip title="Zoom In">
            <IconButton onClick={handleZoomIn}>
              <ZoomInIcon />
            </IconButton>
          </Tooltip>
          <Tooltip title="Zoom Out">
            <IconButton onClick={handleZoomOut}>
              <ZoomOutIcon />
            </IconButton>
          </Tooltip>
          <Tooltip title="Center">
            <IconButton onClick={handleCenter}>
              <CenterIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Paper>

      {/* Main Content */}
      <Box sx={{ display: 'flex', gap: 2, flexGrow: 1 }}>
        {/* Topology View */}
        <Paper sx={{ flexGrow: 1, position: 'relative' }}>
          <Box
            ref={containerRef}
            sx={{
              width: '100%',
              height: '100%',
              minHeight: 500,
            }}
          />
          {scanMutation.isPending && (
            <Box
              sx={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                backgroundColor: 'rgba(255, 255, 255, 0.8)',
              }}
            >
              <Box sx={{ textAlign: 'center' }}>
                <CircularProgress />
                <Typography sx={{ mt: 2 }}>Scanning network...</Typography>
              </Box>
            </Box>
          )}
        </Paper>

        {/* Node Details */}
        {selectedNode && (
          <Card sx={{ width: 300 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                {selectedNode.type === 'subnet' ? 'Subnet Details' : 'Host Details'}
              </Typography>
              
              {selectedNode.type === 'subnet' ? (
                <>
                  <Typography variant="body2" color="text.secondary">
                    Network: {selectedNode.label}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Hosts: {selectedNode.host_count}
                  </Typography>
                </>
              ) : (
                <>
                  <Typography variant="body2" color="text.secondary">
                    IP: {selectedNode.ip}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Hostname: {selectedNode.label}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    OS: {selectedNode.os_guess}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    TTL: {selectedNode.ttl}
                  </Typography>
                  <Box sx={{ mt: 2 }}>
                    <Button size="small" variant="outlined">
                      Scan Vulnerabilities
                    </Button>
                  </Box>
                </>
              )}
            </CardContent>
          </Card>
        )}
      </Box>

      {/* Error Display */}
      {scanMutation.isError && (
        <Alert severity="error" sx={{ mt: 2 }}>
          Failed to scan network: {(scanMutation.error as any)?.message}
        </Alert>
      )}
    </Box>
  );
};

export default NetworkTopology;