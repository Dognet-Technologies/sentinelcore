// src/components/common/EnhancedLayout.tsx
import React, { useState } from 'react';
import {
  Box,
  AppBar,
  Toolbar,
  IconButton,
  Typography,
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Divider,
  Avatar,
  Menu,
  MenuItem,
  Chip,
  Tooltip,
  useTheme,
  useMediaQuery,
  Collapse,
  Badge,
  alpha,
  Button,
} from '@mui/material';
import {
  Menu as MenuIcon,
  Dashboard as DashboardIcon,
  BugReport as BugReportIcon,
  Group as GroupIcon,
  People as PeopleIcon,
  Extension as ExtensionIcon,
  Settings as SettingsIcon,
  Logout as LogoutIcon,
  ExpandLess,
  ExpandMore,
  Security as SecurityIcon,
  Assignment as AssignmentIcon,
  Notifications as NotificationsIcon,
  AccountCircle as AccountCircleIcon,
  ChevronLeft as ChevronLeftIcon,
  ChevronRight as ChevronRightIcon,
  Computer as ComputerIcon,
  BarChart as BarChartIcon,
  DarkMode as DarkModeIcon,
  LightMode as LightModeIcon,
} from '@mui/icons-material';
import { Outlet, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { useEnhancedTheme } from '../../contexts/EnhancedThemeContext';
import { motion, AnimatePresence } from 'framer-motion';

const COLLAPSED_WIDTH = 70;
const EXPANDED_WIDTH = 280;

interface MenuItemData {
  text: string;
  icon: React.ReactElement;
  path: string;
  badge?: number;
  subItems?: MenuItemData[];
}

export const EnhancedLayout: React.FC = () => {
  const theme = useTheme();
  const navigate = useNavigate();
  const location = useLocation();
  const { user, logout } = useAuth();
  const { toggleTheme, currentTheme } = useEnhancedTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [mobileOpen, setMobileOpen] = useState(false);
  const [collapsed, setCollapsed] = useState(false);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [notificationAnchor, setNotificationAnchor] = useState<null | HTMLElement>(null);
  const [expandedItems, setExpandedItems] = useState<string[]>(['reports']);

  const drawerWidth = collapsed ? COLLAPSED_WIDTH : EXPANDED_WIDTH;

  const handleDrawerToggle = () => {
    if (isMobile) {
      setMobileOpen(!mobileOpen);
    } else {
      setCollapsed(!collapsed);
    }
  };

  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const toggleExpanded = (text: string) => {
    setExpandedItems(prev => 
      prev.includes(text) 
        ? prev.filter(item => item !== text)
        : [...prev, text]
    );
  };

  const menuItems: MenuItemData[] = [
    { text: 'Dashboard', icon: <DashboardIcon />, path: '/dashboard', badge: 3 },
    { text: 'Vulnerabilit√†', icon: <BugReportIcon />, path: '/vulnerabilities', badge: 12 },
    { text: 'Host', icon: <ComputerIcon />, path: '/hosts' },
    { 
      text: 'Report', 
      icon: <AssignmentIcon />, 
      path: '/reports',
      subItems: [
        { text: 'Tutti i Report', icon: <BarChartIcon />, path: '/reports' },
        { text: 'Nuovo Report', icon: <AssignmentIcon />, path: '/reports/new' },
        { text: 'Storico', icon: <AssignmentIcon />, path: '/reports/history' },
      ]
    },
    { text: 'Team', icon: <GroupIcon />, path: '/teams' },
    { text: 'Utenti', icon: <PeopleIcon />, path: '/users' },
    { text: 'Plugin', icon: <ExtensionIcon />, path: '/plugins' },
  ];

  const drawer = (
    <Box
      sx={{
        height: '100vh',
        display: 'flex',
        flexDirection: 'column',
        background: theme.palette.mode === 'dark' 
          ? 'linear-gradient(180deg, #1a1a1a 0%, #2d2d2d 100%)'
          : 'linear-gradient(180deg, #1e3a5f 0%, #0d2848 100%)',
        color: '#ffffff',
        position: 'relative',
        transition: 'width 0.3s ease',
      }}
    >
      {/* Logo Section */}
      <Box
        sx={{
          p: collapsed ? 1 : 2,
          display: 'flex',
          alignItems: 'center',
          justifyContent: collapsed ? 'center' : 'space-between',
          borderBottom: `1px solid ${alpha('#ffffff', 0.1)}`,
          height: 70,
        }}
      >
        <AnimatePresence mode="wait">
          {!collapsed && (
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.2 }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <SecurityIcon sx={{ fontSize: 32, color: '#4FC3F7' }} />
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 700, color: '#ffffff' }}>
                    VulnManager
                  </Typography>
                  <Typography variant="caption" sx={{ color: alpha('#ffffff', 0.7) }}>
                    by Dognet
                  </Typography>
                </Box>
              </Box>
            </motion.div>
          )}
        </AnimatePresence>
        
        {collapsed && (
          <SecurityIcon sx={{ fontSize: 28, color: '#4FC3F7' }} />
        )}
        
        {!isMobile && (
          <IconButton
            onClick={handleDrawerToggle}
            sx={{ 
              color: '#ffffff',
              backgroundColor: alpha('#ffffff', 0.1),
              '&:hover': {
                backgroundColor: alpha('#ffffff', 0.2),
              },
            }}
          >
            {collapsed ? <ChevronRightIcon /> : <ChevronLeftIcon />}
          </IconButton>
        )}
      </Box>

      {/* User Profile Section */}
      <Box
        sx={{
          p: 2,
          borderBottom: `1px solid ${alpha('#ffffff', 0.1)}`,
        }}
      >
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 2,
            justifyContent: collapsed ? 'center' : 'flex-start',
          }}
        >
          <Avatar
            sx={{
              width: collapsed ? 40 : 48,
              height: collapsed ? 40 : 48,
              bgcolor: '#4FC3F7',
              fontSize: collapsed ? 16 : 20,
            }}
          >
            {user?.username?.charAt(0).toUpperCase()}
          </Avatar>
          {!collapsed && (
            <Box>
              <Typography variant="subtitle2" sx={{ color: '#ffffff', fontWeight: 600 }}>
                {user?.username}
              </Typography>
              <Chip
                label={user?.role === 'admin' ? 'Amministratore' : 'Utente'}
                size="small"
                sx={{
                  height: 20,
                  backgroundColor: alpha('#4FC3F7', 0.2),
                  color: '#4FC3F7',
                  '& .MuiChip-label': {
                    px: 1,
                    fontSize: '0.7rem',
                  },
                }}
              />
            </Box>
          )}
        </Box>
      </Box>

      {/* Navigation Menu */}
      <List sx={{ flex: 1, overflowY: 'auto', overflowX: 'hidden', p: 1 }}>
        {menuItems.map((item) => (
          <React.Fragment key={item.text}>
            <ListItem disablePadding sx={{ display: 'block', mb: 0.5 }}>
              <ListItemButton
                onClick={() => {
                  if (item.subItems) {
                    toggleExpanded(item.text);
                  } else {
                    navigate(item.path);
                    isMobile && setMobileOpen(false);
                  }
                }}
                selected={location.pathname === item.path}
                sx={{
                  minHeight: 48,
                  justifyContent: collapsed ? 'center' : 'initial',
                  px: collapsed ? 1 : 2.5,
                  borderRadius: 2,
                  mb: 0.5,
                  backgroundColor: location.pathname === item.path 
                    ? alpha('#4FC3F7', 0.2)
                    : 'transparent',
                  '&:hover': {
                    backgroundColor: alpha('#4FC3F7', 0.1),
                  },
                  '&.Mui-selected': {
                    backgroundColor: alpha('#4FC3F7', 0.2),
                    borderLeft: `3px solid #4FC3F7`,
                    '&:hover': {
                      backgroundColor: alpha('#4FC3F7', 0.3),
                    },
                  },
                }}
              >
                <ListItemIcon
                  sx={{
                    minWidth: 0,
                    mr: collapsed ? 0 : 3,
                    justifyContent: 'center',
                    color: location.pathname === item.path ? '#4FC3F7' : alpha('#ffffff', 0.9),
                  }}
                >
                  {item.badge ? (
                    <Badge badgeContent={item.badge} color="error">
                      {item.icon}
                    </Badge>
                  ) : (
                    item.icon
                  )}
                </ListItemIcon>
                {!collapsed && (
                  <>
                    <ListItemText 
                      primary={item.text} 
                      sx={{ 
                        color: '#ffffff',
                        '& .MuiListItemText-primary': {
                          fontSize: '0.95rem',
                          fontWeight: location.pathname === item.path ? 600 : 400,
                        },
                      }}
                    />
                    {item.subItems && (
                      expandedItems.includes(item.text) ? <ExpandLess /> : <ExpandMore />
                    )}
                  </>
                )}
              </ListItemButton>
            </ListItem>
            
            {/* Sub Items */}
            {item.subItems && !collapsed && (
              <Collapse in={expandedItems.includes(item.text)} timeout="auto" unmountOnExit>
                <List component="div" disablePadding>
                  {item.subItems.map((subItem) => (
                    <ListItem key={subItem.text} disablePadding sx={{ pl: 2 }}>
                      <ListItemButton
                        onClick={() => {
                          navigate(subItem.path);
                          isMobile && setMobileOpen(false);
                        }}
                        selected={location.pathname === subItem.path}
                        sx={{
                          minHeight: 40,
                          borderRadius: 1,
                          backgroundColor: location.pathname === subItem.path 
                            ? alpha('#4FC3F7', 0.15)
                            : 'transparent',
                          '&:hover': {
                            backgroundColor: alpha('#4FC3F7', 0.1),
                          },
                        }}
                      >
                        <ListItemIcon
                          sx={{
                            minWidth: 0,
                            mr: 2,
                            color: location.pathname === subItem.path ? '#4FC3F7' : alpha('#ffffff', 0.7),
                          }}
                        >
                          {subItem.icon}
                        </ListItemIcon>
                        <ListItemText 
                          primary={subItem.text}
                          sx={{ 
                            color: alpha('#ffffff', 0.9),
                            '& .MuiListItemText-primary': {
                              fontSize: '0.85rem',
                            },
                          }}
                        />
                      </ListItemButton>
                    </ListItem>
                  ))}
                </List>
              </Collapse>
            )}
          </React.Fragment>
        ))}
      </List>

      {/* Bottom Section */}
      <Box sx={{ p: 2, borderTop: `1px solid ${alpha('#ffffff', 0.1)}` }}>
        <List>
          <ListItem disablePadding>
            <ListItemButton
              onClick={() => navigate('/settings')}
              sx={{
                minHeight: 48,
                justifyContent: collapsed ? 'center' : 'initial',
                px: collapsed ? 1 : 2.5,
                borderRadius: 2,
                '&:hover': {
                  backgroundColor: alpha('#4FC3F7', 0.1),
                },
              }}
            >
              <ListItemIcon
                sx={{
                  minWidth: 0,
                  mr: collapsed ? 0 : 3,
                  justifyContent: 'center',
                  color: alpha('#ffffff', 0.9),
                }}
              >
                <SettingsIcon />
              </ListItemIcon>
              {!collapsed && (
                <ListItemText 
                  primary="Impostazioni" 
                  sx={{ color: '#ffffff' }}
                />
              )}
            </ListItemButton>
          </ListItem>
          
          <ListItem disablePadding>
            <ListItemButton
              onClick={handleLogout}
              sx={{
                minHeight: 48,
                justifyContent: collapsed ? 'center' : 'initial',
                px: collapsed ? 1 : 2.5,
                borderRadius: 2,
                '&:hover': {
                  backgroundColor: alpha('#ff5252', 0.1),
                },
              }}
            >
              <ListItemIcon
                sx={{
                  minWidth: 0,
                  mr: collapsed ? 0 : 3,
                  justifyContent: 'center',
                  color: '#ff5252',
                }}
              >
                <LogoutIcon />
              </ListItemIcon>
              {!collapsed && (
                <ListItemText 
                  primary="Logout" 
                  sx={{ color: '#ff5252' }}
                />
              )}
            </ListItemButton>
          </ListItem>
        </List>

        {!collapsed && (
          <Box
            sx={{
              mt: 2,
              p: 1.5,
              borderRadius: 2,
              backgroundColor: alpha('#4FC3F7', 0.1),
              textAlign: 'center',
            }}
          >
            <Typography variant="caption" sx={{ color: alpha('#ffffff', 0.7) }}>
              v1.0.0 - 2024
            </Typography>
          </Box>
        )}
      </Box>
    </Box>
  );

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh', backgroundColor: theme.palette.background.default }}>
      {/* Top Bar */}
      <AppBar
        position="fixed"
        elevation={0}
        sx={{
          width: { md: `calc(100% - ${drawerWidth}px)` },
          ml: { md: `${drawerWidth}px` },
          backgroundColor: theme.palette.background.paper,
          borderBottom: `1px solid ${theme.palette.divider}`,
          transition: 'all 0.3s ease',
        }}
      >
        <Toolbar sx={{ height: 70 }}>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, display: { md: 'none' } }}
          >
            <MenuIcon />
          </IconButton>
          
          <Box sx={{ flexGrow: 1 }}>
            <Typography variant="h5" noWrap component="div" sx={{ fontWeight: 600, color: theme.palette.text.primary }}>
              {menuItems.find(item => 
                item.path === location.pathname || 
                item.subItems?.some(sub => sub.path === location.pathname)
              )?.text || 'Dashboard'}
            </Typography>
            <Typography variant="caption" color="text.secondary">
              {new Date().toLocaleDateString('it-IT', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
            </Typography>
          </Box>

          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            {/* Theme Toggle */}
            <IconButton onClick={toggleTheme} color="inherit">
              {currentTheme === 'minimal' || currentTheme === 'enterprise' ? <DarkModeIcon /> : <LightModeIcon />}
            </IconButton>

            {/* Notifications */}
            <IconButton
              color="inherit"
              onClick={(e) => setNotificationAnchor(e.currentTarget)}
            >
              <Badge badgeContent={4} color="error">
                <NotificationsIcon />
              </Badge>
            </IconButton>

            {/* Profile */}
            <Button
              onClick={handleProfileMenuOpen}
              startIcon={
                <Avatar sx={{ width: 32, height: 32, bgcolor: theme.palette.primary.main }}>
                  {user?.username?.charAt(0).toUpperCase()}
                </Avatar>
              }
              sx={{ textTransform: 'none' }}
            >
              <Box sx={{ display: { xs: 'none', sm: 'block' }, textAlign: 'left' }}>
                <Typography variant="body2">{user?.username}</Typography>
                <Typography variant="caption" color="text.secondary">
                  {user?.role === 'admin' ? 'Amministratore' : 'Utente'}
                </Typography>
              </Box>
            </Button>
          </Box>
        </Toolbar>
      </AppBar>

      {/* Sidebar */}
      <Box
        component="nav"
        sx={{ 
          width: { md: drawerWidth }, 
          flexShrink: { md: 0 },
          transition: 'width 0.3s ease',
        }}
      >
        {/* Mobile drawer */}
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{
            keepMounted: true,
          }}
          sx={{
            display: { xs: 'block', md: 'none' },
            '& .MuiDrawer-paper': {
              boxSizing: 'border-box',
              width: EXPANDED_WIDTH,
              border: 'none',
            },
          }}
        >
          {drawer}
        </Drawer>

        {/* Desktop drawer */}
        <Drawer
          variant="permanent"
          sx={{
            display: { xs: 'none', md: 'block' },
            '& .MuiDrawer-paper': {
              boxSizing: 'border-box',
              width: drawerWidth,
              border: 'none',
              transition: 'width 0.3s ease',
              overflow: 'hidden',
            },
          }}
          open
        >
          {drawer}
        </Drawer>
      </Box>

      {/* Main Content */}
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 3,
          width: { md: `calc(100% - ${drawerWidth}px)` },
          mt: '70px',
          backgroundColor: theme.palette.background.default,
          transition: 'all 0.3s ease',
        }}
      >
        <Outlet />
      </Box>

      {/* Profile Menu */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <MenuItem onClick={() => { navigate('/profile'); handleMenuClose(); }}>
          <ListItemIcon>
            <AccountCircleIcon fontSize="small" />
          </ListItemIcon>
          Profilo
        </MenuItem>
        <MenuItem onClick={() => { navigate('/settings'); handleMenuClose(); }}>
          <ListItemIcon>
            <SettingsIcon fontSize="small" />
          </ListItemIcon>
          Impostazioni
        </MenuItem>
        <Divider />
        <MenuItem onClick={handleLogout}>
          <ListItemIcon>
            <LogoutIcon fontSize="small" />
          </ListItemIcon>
          Logout
        </MenuItem>
      </Menu>
    </Box>
  );
};