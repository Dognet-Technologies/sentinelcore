// src/contexts/AuthContext.tsx
import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';
import { api } from '../api/api';
import type { User } from '../types';

interface AuthContextType {
  user: User | null;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  loading: boolean;
  isLoading: boolean;
  isAuthenticated: boolean;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Verifica se c'è un token salvato
    const token = localStorage.getItem('auth_token'); // FIX: cambiato da 'token' a 'auth_token'
    if (token) {
      // Verifica la validità del token
      checkAuth();
    } else {
      setLoading(false);
    }
  }, []);

  const checkAuth = async () => {
    try {
      const response = await api.get('/api/users/me'); // FIX: aggiunto /api
      setUser(response.data);
    } catch (error) {
      console.error('Auth check failed:', error);
      localStorage.removeItem('auth_token'); // FIX: cambiato da 'token' a 'auth_token'
    } finally {
      setLoading(false);
    }
  };

  const login = async (username: string, password: string) => {
    try {
      const response = await api.post('/api/auth/login', { username, password }); // FIX: aggiunto /api
      const { token, user } = response.data;
      
      localStorage.setItem('auth_token', token); // FIX: cambiato da 'token' a 'auth_token'
      setUser(user);
      
      // Update axios default header
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    } catch (error: any) {
      console.error('Login error:', error.response?.data || error);
      throw error; // Rilancia l'errore per gestirlo nel componente Login
    }
  };

  const logout = () => {
    localStorage.removeItem('auth_token'); // FIX: cambiato da 'token' a 'auth_token'
    delete api.defaults.headers.common['Authorization'];
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ 
      user, 
      login, 
      logout, 
      loading,
      isLoading: loading,
      isAuthenticated: !!user 
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};