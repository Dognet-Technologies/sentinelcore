// src/contexts/EnhancedThemeContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { ThemeProvider as MuiThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { themes, ThemeName } from '../theme/themes';

interface ThemeContextType {
  currentTheme: ThemeName;
  setTheme: (theme: ThemeName) => void;
  toggleTheme: () => void; // Aggiunta questa funzione
  availableThemes: ThemeName[];
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

interface ThemeProviderProps {
  children: ReactNode;
  defaultTheme?: ThemeName;
}

export const EnhancedThemeProvider: React.FC<ThemeProviderProps> = ({ 
  children, 
  defaultTheme = 'modernTech' 
}) => {
  // Recupera il tema salvato o usa il default
  const [currentTheme, setCurrentTheme] = useState<ThemeName>(() => {
    const savedTheme = localStorage.getItem('selectedTheme') as ThemeName;
    return savedTheme && themes[savedTheme] ? savedTheme : defaultTheme;
  });

  // Salva il tema quando cambia
  useEffect(() => {
    localStorage.setItem('selectedTheme', currentTheme);
    
    // Applica classe al body per effetti globali specifici del tema
    document.body.className = `theme-${currentTheme}`;
    
    // Gestisci effetti specifici per tema
    if (currentTheme === 'cyberpunk') {
      // Aggiungi animazioni globali per cyberpunk
      document.documentElement.style.setProperty('--scan-animation', 'scan 8s linear infinite');
    } else {
      document.documentElement.style.removeProperty('--scan-animation');
    }
  }, [currentTheme]);

  const setTheme = (theme: ThemeName) => {
    if (themes[theme]) {
      setCurrentTheme(theme);
    }
  };

  // Nuova funzione toggleTheme per alternare tra i temi
  const toggleTheme = () => {
    const themeOrder: ThemeName[] = ['modernTech', 'minimal', 'cyberpunk', 'enterprise'];
    const currentIndex = themeOrder.indexOf(currentTheme);
    const nextIndex = (currentIndex + 1) % themeOrder.length;
    setTheme(themeOrder[nextIndex]);
  };

  const value: ThemeContextType = {
    currentTheme,
    setTheme,
    toggleTheme, // Aggiunta al value
    availableThemes: Object.keys(themes) as ThemeName[],
  };

  return (
    <ThemeContext.Provider value={value}>
      <MuiThemeProvider theme={themes[currentTheme]}>
        <CssBaseline />
        {/* Effetti globali aggiuntivi per temi specifici */}
        {currentTheme === 'cyberpunk' && (
          <style>
            {`
              @keyframes scan {
                0% { transform: translateY(-100%); }
                100% { transform: translateY(100vh); }
              }
              
              @keyframes neon-pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.7; }
              }
              
              @keyframes glitch {
                0%, 100% { 
                  text-shadow: 
                    0.05em 0 0 rgba(255, 0, 0, 0.75),
                    -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                    0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
                }
                14% {
                  text-shadow: 
                    0.05em 0 0 rgba(255, 0, 0, 0.75),
                    -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                    0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
                }
                15% {
                  text-shadow: 
                    -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                    0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                    -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
                }
                49% {
                  text-shadow: 
                    -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                    0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                    -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
                }
                50% {
                  text-shadow: 
                    0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                    0.05em 0 0 rgba(0, 255, 0, 0.75),
                    0 -0.05em 0 rgba(0, 0, 255, 0.75);
                }
                99% {
                  text-shadow: 
                    0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                    0.05em 0 0 rgba(0, 255, 0, 0.75),
                    0 -0.05em 0 rgba(0, 0, 255, 0.75);
                }
              }
              
              .theme-cyberpunk h1,
              .theme-cyberpunk h2 {
                animation: glitch 2s ease-in-out infinite alternate-reverse;
              }
              
              .theme-cyberpunk::before {
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 2px;
                background: linear-gradient(90deg, transparent, #00ff00, transparent);
                animation: var(--scan-animation);
                pointer-events: none;
                z-index: 9999;
              }
            `}
          </style>
        )}
        {currentTheme === 'modernTech' && (
          <style>
            {`
              @keyframes shimmer {
                0% { background-position: -1000px 0; }
                100% { background-position: 1000px 0; }
              }
              
              .theme-modernTech .shimmer-effect {
                background: linear-gradient(
                  90deg,
                  transparent 0%,
                  rgba(0, 191, 255, 0.1) 50%,
                  transparent 100%
                );
                background-size: 1000px 100%;
                animation: shimmer 3s ease-in-out infinite;
              }
            `}
          </style>
        )}
        {children}
      </MuiThemeProvider>
    </ThemeContext.Provider>
  );
};

// Hook per usare il context
export const useEnhancedTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useEnhancedTheme must be used within an EnhancedThemeProvider');
  }
  return context;
};