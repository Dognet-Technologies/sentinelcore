// src/types/index.ts

export type Role = 'admin' | 'reporter';

// User types
export interface User {
  id: number;
  username: string;
  email?: string;
  role: Role;
  created_at: string;
  updated_at: string;
  last_login?: string;
  stats?: {
    reports_created: number;
    vulnerabilities_reported: number;
    hosts_managed: number;
  };
}

export interface LoginCredentials {
  username: string;
  password: string;
}

export interface AuthResponse {
  token: string;
  user: User;
}

// Vulnerability enums - matching Rust backend
export enum VulnerabilityStatus {
  Open = 'open',
  InProgress = 'in_progress',
  Resolved = 'resolved',
  Closed = 'closed'
}

export enum VulnerabilitySeverity {
  Critical = 'critical',
  High = 'high',
  Medium = 'medium',
  Low = 'low',
  Info = 'info'
}

// Vulnerability types
export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  cvss_score: number;
  epss_score?: number;
  ip_address: string;
  hostname?: string;
  port?: number;
  protocol?: string;
  status: VulnerabilityStatus;
  severity: VulnerabilitySeverity;
  cve_id?: string;
  cwe_id?: string;
  remediation?: string;
  source: string;
  discovered_at: string;
  created_at: string;
  updated_at: string;
  asset_id?: string;
  assigned_team_id?: string;
  
  // Legacy fields for backward compatibility
  host_id?: number;
  name?: string;
  resolved_at?: string;
  plugin_id?: string;
  plugin_name?: string;
  solution?: string;
}

export interface VulnerabilityFilter {
  status?: VulnerabilityStatus;
  severity?: VulnerabilitySeverity;
  ip_address?: string;
  hostname?: string;
  cve_id?: string;
  assigned_team_id?: string;
  asset_id?: string;
}

// Asset types
export interface Asset {
  id: string;
  name: string;
  type: 'server' | 'workstation' | 'network' | 'application' | 'container' | 'cloud' | 'iot' | 'other';
  ip_address?: string;
  hostname?: string;
  os?: string;
  description?: string;
  tags?: string[];
  created_at: string;
  updated_at: string;
}

// Host types (legacy compatibility)
export interface Host {
  id: number;
  hostname: string;
  ip_address: string;
  os?: string;
  description?: string;
  vulnerability_count?: number;
  last_scan?: string;
  created_at: string;
  updated_at: string;
}

// Team types
export interface Team {
  id: string;
  name: string;
  description?: string;
  contact_email?: string;
  slack_webhook?: string;
  telegram_chat_id?: string;
  members_count?: number;
  created_at: string;
  updated_at: string;
}

export interface TeamMember {
  id: string;
  team_id: string;
  user_id: string;
  role: 'leader' | 'member';
  created_at: string;
  user?: User;
}

export interface NewTeam {
  name: string;
  description?: string;
  contact_email?: string;
  slack_webhook?: string;
  telegram_chat_id?: string;
}

// Plugin types
export interface Plugin {
  id: string;
  name: string;
  display_name: string;
  version: string;
  author: string;
  description?: string;
  type: 'import' | 'export' | 'notification' | 'analysis' | 'integration' | 'other';
  language: string;
  enabled: boolean;
  path: string;
  config: any;
  created_at: string;
  updated_at: string;
}

export interface NewPlugin {
  name: string;
  display_name: string;
  version: string;
  author: string;
  description?: string;
  plugin_type: 'import' | 'export' | 'notification' | 'analysis' | 'integration' | 'other';
  language: string;
  path: string;
  config?: any;
}

export interface UpdatePlugin {
  display_name?: string;
  version?: string;
  description?: string;
  enabled?: boolean;
  config?: any;
}

// Report types
export interface Report {
  id: string;
  title: string;
  description?: string;
  host_count?: number;
  vulnerability_count?: number;
  severity?: VulnerabilitySeverity;
  status: 'draft' | 'completed' | 'sent';
  created_by?: string;
  created_at: string;
  updated_at: string;
}