// src/api/plugins.ts
import { api } from './api';
import { Plugin, NewPlugin, UpdatePlugin } from '../types';

export const pluginsApi = {
  // List all plugins
  list: async (): Promise<Plugin[]> => {
    const response = await api.get('/api/plugins');
    return response.data;
  },

  // Get single plugin
  get: async (id: string): Promise<Plugin> => {
    const response = await api.get(`/api/plugins/${id}`);
    return response.data;
  },

  // Install new plugin
  install: async (plugin: NewPlugin): Promise<Plugin> => {
    const response = await api.post('/api/plugins', plugin);
    return response.data;
  },

  // Update plugin
  update: async (id: string, data: UpdatePlugin): Promise<Plugin> => {
    const response = await api.put(`/api/plugins/${id}`, data);
    return response.data;
  },

  // Uninstall plugin
  uninstall: async (id: string): Promise<void> => {
    await api.delete(`/api/plugins/${id}`);
  },

  // Toggle plugin enabled/disabled
  toggle: async (id: string): Promise<Plugin> => {
    const response = await api.post(`/api/plugins/${id}/toggle`);
    return response.data;
  },

  // Execute plugin action
  execute: async (id: string, action: string, data: any): Promise<any> => {
    const response = await api.post(`/api/plugins/${id}/execute`, {
      action,
      data
    });
    return response.data;
  },

  // Upload plugin file
  upload: async (file: File): Promise<Plugin> => {
    const formData = new FormData();
    formData.append('plugin', file);
    
    const response = await api.post('/api/plugins/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    });
    return response.data;
  },

  // Scan plugin directory
  scan: async (): Promise<Plugin[]> => {
    const response = await api.post('/api/plugins/scan');
    return response.data;
  }
};