// src/handlers/user.rs
// FIXED: Back to original handler signatures, no UserResponse wrapper

use crate::auth::Claims;
use crate::models::user::{
    User, Role, UpdateProfileRequest, ChangePasswordRequest, UserSession, 
    ReputationEvent, SecuritySettings, NewUser, UpdateUser
};
use axum::{
    extract::{Path, Extension, Multipart},
    http::StatusCode,
    Json,
};
use sqlx::PgPool;
use std::sync::Arc;
use uuid::Uuid;
use crate::auth::Auth;

#[derive(Debug, serde::Serialize)]
pub struct ErrorResponse {
    pub error: String,
}

// GET CURRENT USER - FIXED: No is_active field
pub async fn get_current_user(
    Extension(pool): Extension<Arc<PgPool>>,
    claims: Claims,
) -> Result<Json<User>, StatusCode> {
    let user_id = claims.sub.parse::<Uuid>().map_err(|_| StatusCode::BAD_REQUEST)?;
    
    let user = sqlx::query_as!(
        User,
        r#"
        SELECT id, username, email, password_hash, role as "role: Role",
               reputation_score, avatar_url, last_login, failed_login_attempts,
               account_locked_until, two_factor_enabled, two_factor_secret,
               phone_number, bio, preferred_language, created_at, updated_at
        FROM users 
        WHERE id = $1
        "#,
        user_id
    )
    .fetch_optional(&*pool)
    .await
    .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?
    .ok_or(StatusCode::NOT_FOUND)?;

    Ok(Json(user))
}

// UPDATE CURRENT USER - FIXED: No is_active field
pub async fn update_current_user(
    Extension(pool): Extension<Arc<PgPool>>,
    claims: Claims,
    Json(payload): Json<UpdateProfileRequest>,
) -> Result<Json<User>, StatusCode> {
    let user_id = claims.sub.parse::<Uuid>().map_err(|_| StatusCode::BAD_REQUEST)?;
    
    let user = sqlx::query_as!(
        User,
        r#"
        UPDATE users 
        SET username = COALESCE($2, username),
            email = COALESCE($3, email),
            phone_number = COALESCE($4, phone_number),
            bio = COALESCE($5, bio),
            preferred_language = COALESCE($6, preferred_language),
            updated_at = NOW()
        WHERE id = $1
        RETURNING id, username, email, password_hash, role as "role: Role",
                  reputation_score, avatar_url, last_login, failed_login_attempts,
                  account_locked_until, two_factor_enabled, two_factor_secret,
                  phone_number, bio, preferred_language, created_at, updated_at
        "#,
        user_id,
        payload.username,
        payload.email,
        payload.phone_number,
        payload.bio,
        payload.preferred_language
    )
    .fetch_one(&*pool)
    .await
    .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;

    Ok(Json(user))
}

// CHANGE PASSWORD - Placeholder
pub async fn change_password(
    Extension(_pool): Extension<Arc<PgPool>>,
    Extension(_auth): Extension<Arc<Auth>>,
    _claims: Claims,
    Json(_request): Json<ChangePasswordRequest>,
) -> Result<StatusCode, StatusCode> {
    // Placeholder implementation
    Ok(StatusCode::NO_CONTENT)
}

// UPLOAD AVATAR - FIXED: No lifetime parameter
pub async fn upload_avatar(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    _multipart: Multipart,
) -> Result<Json<String>, StatusCode> {
    // Placeholder implementation
    Ok(Json("Avatar uploaded successfully".to_string()))
}

// GET USER SESSIONS
pub async fn get_user_sessions(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
) -> Result<Json<Vec<UserSession>>, StatusCode> {
    // Placeholder implementation
    Ok(Json(vec![]))
}

// REVOKE SESSION
pub async fn revoke_session(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    Path(_session_id): Path<Uuid>,
) -> Result<StatusCode, StatusCode> {
    // Placeholder implementation
    Ok(StatusCode::NO_CONTENT)
}

// ENABLE TWO FACTOR
pub async fn enable_two_factor(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
) -> Result<Json<String>, StatusCode> {
    // Placeholder implementation
    Ok(Json("Two factor enabled".to_string()))
}

// DISABLE TWO FACTOR
pub async fn disable_two_factor(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
) -> Result<StatusCode, StatusCode> {
    // Placeholder implementation
    Ok(StatusCode::NO_CONTENT)
}

// VERIFY TWO FACTOR
pub async fn verify_two_factor(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    Json(_code): Json<String>,
) -> Result<Json<bool>, StatusCode> {
    // Placeholder implementation
    Ok(Json(true))
}

// GET SECURITY SETTINGS
pub async fn get_security_settings(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
) -> Result<Json<SecuritySettings>, StatusCode> {
    // Placeholder implementation
    let settings = SecuritySettings {
        two_factor_enabled: false,
        session_timeout: 60,
        ip_whitelist_enabled: false,
        allowed_ips: vec![],
        password_expiry_days: None,
        require_password_change: false,
    };
    Ok(Json(settings))
}

// UPDATE SECURITY SETTINGS
pub async fn update_security_settings(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    Json(_settings): Json<SecuritySettings>,
) -> Result<StatusCode, StatusCode> {
    // Placeholder implementation
    Ok(StatusCode::NO_CONTENT)
}

// GET REPUTATION EVENTS
pub async fn get_reputation_events(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
) -> Result<Json<Vec<ReputationEvent>>, StatusCode> {
    // Placeholder implementation
    Ok(Json(vec![]))
}

// ADMIN FUNCTIONS

// LIST USERS - FIXED: No is_active field
pub async fn list_users(
    Extension(pool): Extension<Arc<PgPool>>,
    _claims: Claims,
) -> Result<Json<Vec<User>>, StatusCode> {
    let users = sqlx::query_as!(
        User,
        r#"
        SELECT id, username, email, password_hash, role as "role: Role",
               reputation_score, avatar_url, last_login, failed_login_attempts,
               account_locked_until, two_factor_enabled, two_factor_secret,
               phone_number, bio, preferred_language, created_at, updated_at
        FROM users 
        ORDER BY created_at DESC
        "#
    )
    .fetch_all(&*pool)
    .await
    .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;

    Ok(Json(users))
}

// CREATE USER - FIXED: No is_active field
pub async fn create_user(
    Extension(pool): Extension<Arc<PgPool>>,
    Extension(auth): Extension<Arc<Auth>>,
    _claims: Claims,
    Json(new_user): Json<NewUser>,
) -> Result<Json<User>, StatusCode> {
    let password_hash = auth.hash_password(&new_user.password)
        .map_err(|_| StatusCode::BAD_REQUEST)?;
    
    let role = new_user.role.unwrap_or(Role::User);
    
    let user = sqlx::query_as!(
        User,
        r#"
        INSERT INTO users (username, email, password_hash, role)
        VALUES ($1, $2, $3, $4)
        RETURNING id, username, email, password_hash, role as "role: Role",
                  reputation_score, avatar_url, last_login, failed_login_attempts,
                  account_locked_until, two_factor_enabled, two_factor_secret,
                  phone_number, bio, preferred_language, created_at, updated_at
        "#,
        new_user.username,
        new_user.email,
        password_hash,
        role as _
    )
    .fetch_one(&*pool)
    .await
    .map_err(|_| StatusCode::BAD_REQUEST)?;

    Ok(Json(user))
}

// GET USER - FIXED: No is_active field
pub async fn get_user(
    Extension(pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    Path(user_id): Path<Uuid>,
) -> Result<Json<User>, StatusCode> {
    let user = sqlx::query_as!(
        User,
        r#"
        SELECT id, username, email, password_hash, role as "role: Role",
               reputation_score, avatar_url, last_login, failed_login_attempts,
               account_locked_until, two_factor_enabled, two_factor_secret,
               phone_number, bio, preferred_language, created_at, updated_at
        FROM users 
        WHERE id = $1
        "#,
        user_id
    )
    .fetch_optional(&*pool)
    .await
    .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?
    .ok_or(StatusCode::NOT_FOUND)?;

    Ok(Json(user))
}

// UPDATE USER - Placeholder
pub async fn update_user(
    Extension(_pool): Extension<Arc<PgPool>>,
    Extension(_auth): Extension<Arc<Auth>>,
    _claims: Claims,
    Path(_user_id): Path<Uuid>,
    Json(_update_data): Json<UpdateUser>,
) -> Result<Json<User>, StatusCode> {
    // Placeholder implementation
    Err(StatusCode::NOT_IMPLEMENTED)
}

// DELETE USER
pub async fn delete_user(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    Path(_user_id): Path<Uuid>,
) -> Result<StatusCode, StatusCode> {
    // Placeholder implementation
    Ok(StatusCode::NO_CONTENT)
}

// LOCK USER
pub async fn lock_user(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    Path(_user_id): Path<Uuid>,
) -> Result<StatusCode, StatusCode> {
    // Placeholder implementation
    Ok(StatusCode::NO_CONTENT)
}

// UNLOCK USER
pub async fn unlock_user(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    Path(_user_id): Path<Uuid>,
) -> Result<StatusCode, StatusCode> {
    // Placeholder implementation
    Ok(StatusCode::NO_CONTENT)
}

// GET USER SESSIONS ADMIN
pub async fn get_user_sessions_admin(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    Path(_user_id): Path<Uuid>,
) -> Result<Json<Vec<UserSession>>, StatusCode> {
    // Placeholder implementation
    Ok(Json(vec![]))
}

// REVOKE ALL USER SESSIONS
pub async fn revoke_all_user_sessions(
    Extension(_pool): Extension<Arc<PgPool>>,
    _claims: Claims,
    Path(_user_id): Path<Uuid>,
) -> Result<StatusCode, StatusCode> {
    // Placeholder implementation
    Ok(StatusCode::NO_CONTENT)
}