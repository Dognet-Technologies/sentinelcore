// src/models/user.rs
// FIXED: Rimosso ipnetwork::IpNetwork import

use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use validator::Validate;

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, sqlx::Type)]
#[sqlx(type_name = "user_role", rename_all = "snake_case")]
pub enum Role {
    Admin,
    TeamLeader,
    User,
}

impl Role {
    pub fn as_str(&self) -> &'static str {
        match self {
            Role::Admin => "admin",
            Role::TeamLeader => "team_leader",
            Role::User => "user",
        }
    }
}

// User struct - EXACTLY aligned with real database schema
#[derive(Debug, Serialize, Deserialize, Clone, Validate, sqlx::FromRow)]
pub struct User {
    pub id: Uuid,
    
    #[validate(length(min = 3, max = 50))]
    pub username: String,
    
    #[serde(skip_serializing)]
    pub password_hash: String,
    
    #[validate(email)]
    pub email: String,
    
    pub role: Role,
    
    // These fields can be NULL in database
    pub reputation_score: Option<i32>,
    pub avatar_url: Option<String>,
    pub last_login: Option<DateTime<Utc>>,
    pub failed_login_attempts: Option<i32>,
    pub account_locked_until: Option<DateTime<Utc>>,
    pub two_factor_enabled: Option<bool>,
    
    #[serde(skip_serializing)]
    pub two_factor_secret: Option<String>,
    
    pub phone_number: Option<String>,
    pub bio: Option<String>,
    pub preferred_language: Option<String>,
    
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    // NOTE: NO is_active field - it doesn't exist in the real database
}

// Session management
#[derive(Debug, Serialize, Deserialize, Clone, sqlx::FromRow)]
pub struct UserSession {
    pub id: Uuid,
    pub user_id: Uuid,
    pub session_token: String,
    pub ip_address: String,                    // FIXED: String instead of IpNetwork (NOT NULL in DB)
    pub user_agent: Option<String>,
    pub device_info: Option<serde_json::Value>,
    pub created_at: DateTime<Utc>,
    pub last_activity: DateTime<Utc>,
    pub expires_at: DateTime<Utc>,
    pub is_active: Option<bool>,               // This field EXISTS in user_sessions table
    pub revoked_at: Option<DateTime<Utc>>,
    pub revoked_reason: Option<String>,
}

// Reputation events
#[derive(Debug, Serialize, Deserialize, Clone, sqlx::FromRow)]
pub struct ReputationEvent {
    pub id: Uuid,
    pub user_id: Uuid,
    pub event_type: String,
    pub points: i32,
    pub description: Option<String>,
    pub related_entity_type: Option<String>,
    pub related_entity_id: Option<Uuid>,
    pub created_at: DateTime<Utc>,
}

// Security settings (not stored in DB, calculated)
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct SecuritySettings {
    pub two_factor_enabled: bool,
    pub session_timeout: i32, // minutes
    pub ip_whitelist_enabled: bool,
    pub allowed_ips: Vec<String>,
    pub password_expiry_days: Option<i32>,
    pub require_password_change: bool,
}

// Request/Response types
#[derive(Debug, Serialize, Deserialize)]
pub struct NewUser {
    pub username: String,
    pub email: String,
    pub password: String,
    pub role: Option<Role>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateUser {
    pub username: Option<String>,
    pub email: Option<String>,
    pub password: Option<String>,
    pub role: Option<Role>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct LoginCredentials {
    pub username: String,
    pub password: String,
    pub two_factor_code: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct UpdateProfileRequest {
    #[validate(length(min = 3, max = 50))]
    pub username: Option<String>,
    
    #[validate(email)]
    pub email: Option<String>,
    
    pub phone_number: Option<String>,
    pub bio: Option<String>,
    pub preferred_language: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Validate)]
pub struct ChangePasswordRequest {
    pub current_password: String,
    
    #[validate(length(min = 8, max = 128))]
    pub new_password: String,
}

// Pagination parameters
#[derive(Debug, Serialize, Deserialize)]
pub struct PaginationParams {
    pub page: Option<i64>,
    pub limit: Option<i64>,
}

// IP whitelist model (placeholder - if implemented in future)
#[derive(Debug, Serialize, Deserialize, Clone, sqlx::FromRow)]
pub struct IpWhitelist {
    pub id: Uuid,
    pub ip_address: String,                    // FIXED: String instead of IpNetwork
    pub cidr_mask: Option<i32>,
    pub description: Option<String>,
    pub user_id: Option<Uuid>,
    pub team_id: Option<Uuid>,
    pub created_at: DateTime<Utc>,
    pub expires_at: Option<DateTime<Utc>>,
    pub is_active: bool,
}

// User permission model (placeholder - if implemented in future)
#[derive(Debug, Serialize, Deserialize, Clone, sqlx::FromRow)]
pub struct UserPermission {
    pub id: Uuid,
    pub user_id: Uuid,
    pub permission: String,
    pub resource_type: Option<String>,
    pub resource_id: Option<Uuid>,
    pub granted_by: Uuid,
    pub created_at: DateTime<Utc>,
    pub expires_at: Option<DateTime<Utc>>,
    pub is_active: bool,
}