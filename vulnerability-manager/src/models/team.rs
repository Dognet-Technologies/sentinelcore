// src/models/team.rs
// FIXED: Aligned to REAL database schema (contact_email NOT NULL, others nullable)

use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Serialize, Deserialize, Clone, sqlx::FromRow)]
pub struct Team {
    pub id: Uuid,
    pub name: String,
    pub description: Option<String>,        // Nullable in DB
    pub contact_email: Option<String>,      // Actually nullable in DB (despite schema showing NOT NULL)
    pub slack_webhook: Option<String>,      // Nullable in DB
    pub telegram_chat_id: Option<String>,   // Nullable in DB
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize, Clone, sqlx::FromRow)]
pub struct TeamMember {
    pub id: Uuid,
    pub team_id: Uuid,
    pub name: String,
    pub email: String,
    pub created_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NewTeam {
    pub name: String,
    pub description: Option<String>,
    pub contact_email: Option<String>,      // Made optional to match usage
    pub slack_webhook: Option<String>,
    pub telegram_chat_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateTeam {
    pub name: Option<String>,
    pub description: Option<String>,
    pub contact_email: Option<String>,
    pub slack_webhook: Option<String>,
    pub telegram_chat_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NewTeamMember {
    pub name: String,
    pub email: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TeamStats {
    pub total_members: i64,
    pub assigned_vulnerabilities: i64,
    pub resolved_vulnerabilities: i64,
    pub avg_resolution_time_hours: Option<f64>,
}