use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use sqlx::postgres::PgRow;
use sqlx::{FromRow, Row};
use uuid::Uuid;

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq)]
pub enum ResolutionStatus {
    Assigned,
    InProgress,
    Completed,
    Verified,
    Rejected,
}

impl ResolutionStatus {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Assigned => "assigned",
            Self::InProgress => "in_progress",
            Self::Completed => "completed",
            Self::Verified => "verified",
            Self::Rejected => "rejected",
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Resolution {
    pub id: Uuid,
    pub vulnerability_id: Uuid,
    pub team_id: Uuid,
    pub assigned_by: Uuid,
    pub status: ResolutionStatus,
    pub notes: Option<String>,
    pub solution: Option<String>,
    pub assigned_at: DateTime<Utc>,
    pub started_at: Option<DateTime<Utc>>,
    pub completed_at: Option<DateTime<Utc>>,
    pub verified_at: Option<DateTime<Utc>>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NewResolution {
    pub vulnerability_id: Uuid,
    pub team_id: Uuid,
    pub notes: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateResolution {
    pub status: Option<ResolutionStatus>,
    pub notes: Option<String>,
    pub solution: Option<String>,
}

impl FromRow<'_, PgRow> for Resolution {
    fn from_row(row: &PgRow) -> sqlx::Result<Self> {
        let status_str: String = row.try_get("status")?;
        let status = match status_str.as_str() {
            "assigned" => ResolutionStatus::Assigned,
            "in_progress" => ResolutionStatus::InProgress,
            "completed" => ResolutionStatus::Completed,
            "verified" => ResolutionStatus::Verified,
            "rejected" => ResolutionStatus::Rejected,
            _ => return Err(sqlx::Error::RowNotFound),
        };

        Ok(Resolution {
            id: row.try_get("id")?,
            vulnerability_id: row.try_get("vulnerability_id")?,
            team_id: row.try_get("team_id")?,
            assigned_by: row.try_get("assigned_by")?,
            status,
            notes: row.try_get("notes")?,
            solution: row.try_get("solution")?,
            assigned_at: row.try_get("assigned_at")?,
            started_at: row.try_get("started_at")?,
            completed_at: row.try_get("completed_at")?,
            verified_at: row.try_get("verified_at")?,
            created_at: row.try_get("created_at")?,
            updated_at: row.try_get("updated_at")?,
        })
    }
}
