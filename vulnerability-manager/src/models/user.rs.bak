use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use validator::Validate;

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, sqlx::Type)]
#[sqlx(type_name = "user_role", rename_all = "snake_case")]
pub enum Role {
    Admin,
    TeamLeader,
    User,
}

impl Role {
    pub fn as_str(&self) -> &'static str {
        match self {
            Role::Admin => "admin",
            Role::TeamLeader => "team_leader",
            Role::User => "user",
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Validate, sqlx::FromRow)]
pub struct User {
    pub id: Uuid,
    
    #[validate(length(min = 3, max = 50))]
    pub username: String,
    
    #[serde(skip_serializing)]
    pub password_hash: String,
    
    #[validate(email)]
    pub email: String,
    
    pub role: Role,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NewUser {
    pub username: String,
    pub email: String,
    pub password: String,
    pub role: Role,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateUser {
    pub username: Option<String>,
    pub email: Option<String>,
    pub password: Option<String>,
    pub role: Option<Role>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct LoginCredentials {
    pub username: String,
    pub password: String,
}

// Con sqlx::Type derivato, non serve più FromRow custom
// SQLx gestirà automaticamente la conversione