// src/models/vulnerability.rs
// FIXED: Cambiato IpNetwork a String, corretto VulnerabilityFilter

use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, sqlx::Type)]
#[sqlx(type_name = "vulnerability_status", rename_all = "snake_case")]
pub enum VulnerabilityStatus {
    Open,
    InProgress,
    Resolved,
    Closed,
}

impl VulnerabilityStatus {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Open => "open",
            Self::InProgress => "in_progress",
            Self::Resolved => "resolved",
            Self::Closed => "closed",
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, sqlx::Type)]
#[sqlx(type_name = "vulnerability_severity", rename_all = "snake_case")]
pub enum VulnerabilitySeverity {
    Critical,
    High,
    Medium,
    Low,
    Info,
}

impl VulnerabilitySeverity {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Critical => "critical",
            Self::High => "high",
            Self::Medium => "medium",
            Self::Low => "low",
            Self::Info => "info",
        }
    }

    pub fn from_cvss(score: f32) -> Self {
        match score {
            s if s >= 9.0 => Self::Critical,
            s if s >= 7.0 => Self::High,
            s if s >= 4.0 => Self::Medium,
            s if s >= 0.1 => Self::Low,
            _ => Self::Info,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, sqlx::FromRow)]
pub struct Vulnerability {
    pub id: Uuid,
    pub title: String,
    pub description: String,
    pub cvss_score: f32,
    pub epss_score: Option<f32>,
    pub ip_address: String,                    // FIXED: String instead of IpNetwork
    pub hostname: Option<String>,
    pub port: Option<i32>,
    pub protocol: Option<String>,
    pub status: VulnerabilityStatus,
    pub severity: VulnerabilitySeverity,
    pub cve_id: Option<String>,
    pub cwe_id: Option<String>,
    pub remediation: Option<String>,
    pub source: String,
    pub discovered_at: Option<DateTime<Utc>>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub asset_id: Option<Uuid>,
    pub assigned_team_id: Option<Uuid>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NewVulnerability {
    pub title: String,
    pub description: String,
    pub cvss_score: f32,
    pub epss_score: Option<f32>,
    pub ip_address: String,                    // FIXED: String instead of IpNetwork
    pub hostname: Option<String>,
    pub port: Option<i32>,
    pub protocol: Option<String>,
    pub cve_id: Option<String>,
    pub cwe_id: Option<String>,
    pub remediation: Option<String>,
    pub source: String,
    pub discovered_at: Option<DateTime<Utc>>,
    pub asset_id: Option<Uuid>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateVulnerability {
    pub title: Option<String>,
    pub description: Option<String>,
    pub cvss_score: Option<f32>,
    pub epss_score: Option<f32>,
    pub status: Option<VulnerabilityStatus>,
    pub remediation: Option<String>,
    pub assigned_team_id: Option<Uuid>,
}

// FIXED: Corretto ip_address da String a Option<String> per il filtro
#[derive(Debug, Serialize, Deserialize, Default)]
pub struct VulnerabilityFilter {
    pub status: Option<VulnerabilityStatus>,
    pub severity: Option<VulnerabilitySeverity>,
    pub ip_address: Option<String>,            // FIXED: Option<String> per filtro di ricerca
    pub hostname: Option<String>,
    pub cve_id: Option<String>,
    pub assigned_team_id: Option<Uuid>,
    pub asset_id: Option<Uuid>,
}