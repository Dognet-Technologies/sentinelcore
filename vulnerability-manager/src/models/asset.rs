// src/models/asset.rs
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use validator::Validate;

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, sqlx::Type)]
#[sqlx(type_name = "asset_type", rename_all = "snake_case")]
pub enum AssetType {
    Server,
    Workstation,
    Network,
    Application,
    Container,
    Cloud,
    IoT,
    Other,
}

impl AssetType {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Server => "server",
            Self::Workstation => "workstation",
            Self::Network => "network",
            Self::Application => "application",
            Self::Container => "container",
            Self::Cloud => "cloud",
            Self::IoT => "iot",
            Self::Other => "other",
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Validate, sqlx::FromRow)]
pub struct Asset {
    pub id: Uuid,
    
    #[validate(length(min = 1, max = 100))]
    pub name: String,
    
    pub asset_type: AssetType,
    pub description: Option<String>,
    pub ip_address: Option<String>,
    pub hostname: Option<String>,
    pub mac_address: Option<String>,
    pub operating_system: Option<String>,
    pub owner: Option<String>,
    pub location: Option<String>,
    pub tags: Vec<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NewAsset {
    pub name: String,
    pub asset_type: AssetType,
    pub description: Option<String>,
    pub ip_address: Option<String>,
    pub hostname: Option<String>,
    pub mac_address: Option<String>,
    pub operating_system: Option<String>,
    pub owner: Option<String>,
    pub location: Option<String>,
    pub tags: Option<Vec<String>>,
}


#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateAsset {
    pub name: Option<String>,
    pub asset_type: Option<AssetType>,
    pub description: Option<String>,
    pub ip_address: Option<String>,
    pub hostname: Option<String>,
    pub mac_address: Option<String>,
    pub operating_system: Option<String>,
    pub owner: Option<String>,
    pub location: Option<String>,
    pub tags: Option<Vec<String>>,
}