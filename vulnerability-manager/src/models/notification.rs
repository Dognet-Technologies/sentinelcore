use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use sqlx::postgres::PgRow;
use sqlx::{FromRow, Row};
use uuid::Uuid;

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq)]
pub enum NotificationType {
    Email,
    Slack,
    Telegram,
}

impl NotificationType {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Email => "email",
            Self::Slack => "slack",
            Self::Telegram => "telegram",
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq)]
pub enum NotificationStatus {
    Pending,
    Sent,
    Failed,
}

impl NotificationStatus {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Pending => "pending",
            Self::Sent => "sent",
            Self::Failed => "failed",
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Notification {
    pub id: Uuid,
    pub team_id: Uuid,
    pub notification_type: NotificationType,
    pub status: NotificationStatus,
    pub subject: String,
    pub content: String,
    pub error_message: Option<String>,
    pub sent_at: Option<DateTime<Utc>>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NewNotification {
    pub team_id: Uuid,
    pub notification_type: NotificationType,
    pub subject: String,
    pub content: String,
}

impl FromRow<'_, PgRow> for Notification {
    fn from_row(row: &PgRow) -> sqlx::Result<Self> {
        let notification_type_str: String = row.try_get("notification_type")?;
        let notification_type = match notification_type_str.as_str() {
            "email" => NotificationType::Email,
            "slack" => NotificationType::Slack,
            "telegram" => NotificationType::Telegram,
            _ => return Err(sqlx::Error::RowNotFound),
        };

        let status_str: String = row.try_get("status")?;
        let status = match status_str.as_str() {
            "pending" => NotificationStatus::Pending,
            "sent" => NotificationStatus::Sent,
            "failed" => NotificationStatus::Failed,
            _ => return Err(sqlx::Error::RowNotFound),
        };

        Ok(Notification {
            id: row.try_get("id")?,
            team_id: row.try_get("team_id")?,
            notification_type,
            status,
            subject: row.try_get("subject")?,
            content: row.try_get("content")?,
            error_message: row.try_get("error_message")?,
            sent_at: row.try_get("sent_at")?,
            created_at: row.try_get("created_at")?,
            updated_at: row.try_get("updated_at")?,
        })
    }
}