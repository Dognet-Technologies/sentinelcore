// src/models/report.rs
// FIXED: Alignment with database schema - added missing fields

use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, sqlx::Type)]
#[sqlx(type_name = "report_type", rename_all = "snake_case")]
pub enum ReportType {
    Scan,
    Manual,
    Export,
}

impl ReportType {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Scan => "scan",
            Self::Manual => "manual",
            Self::Export => "export",
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, sqlx::Type)]
#[sqlx(type_name = "report_status", rename_all = "snake_case")]
pub enum ReportStatus {
    Pending,
    Processing,
    Completed,
    Failed,
}

impl ReportStatus {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Pending => "pending",
            Self::Processing => "processing",
            Self::Completed => "completed",
            Self::Failed => "failed",
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, sqlx::Type)]
#[sqlx(type_name = "report_format", rename_all = "snake_case")]
pub enum ReportFormat {
    Xml,
    Json,
    Csv,
    Pdf,
    Text,
}

impl ReportFormat {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Xml => "xml",
            Self::Json => "json",
            Self::Csv => "csv",
            Self::Pdf => "pdf",
            Self::Text => "text",
        }
    }
}

// FIXED: Report struct with ALL database fields including source, error_message, processed_vulns
#[derive(Debug, Serialize, Deserialize, Clone, sqlx::FromRow)]
pub struct Report {
    pub id: Uuid,
    pub name: String,
    pub report_type: ReportType,
    pub status: ReportStatus,
    pub format: ReportFormat,
    
    // ADDED: Missing fields from database schema
    pub source: String,
    pub error_message: Option<String>,
    pub processed_vulns: Option<i32>,
    
    pub file_path: Option<String>,
    pub created_by: Uuid,
    pub scan_date: Option<DateTime<Utc>>,
    pub total_vulns: Option<i32>,
    
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NewReport {
    pub name: String,
    pub report_type: ReportType,
    pub format: ReportFormat,
    pub source: String,  // ADDED: Required field
    pub scan_date: Option<DateTime<Utc>>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateReport {
    pub name: Option<String>,
    pub status: Option<ReportStatus>,
    pub error_message: Option<String>,
    pub processed_vulns: Option<i32>,
    pub total_vulns: Option<i32>,
    pub file_path: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ReportFilter {
    pub report_type: Option<ReportType>,
    pub status: Option<ReportStatus>,
    pub created_by: Option<Uuid>,
    pub start_date: Option<DateTime<Utc>>,
    pub end_date: Option<DateTime<Utc>>,
}