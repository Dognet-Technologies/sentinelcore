// src/models/plugin.rs
// FIXED: Aggiunto campo version in UpdatePlugin

use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, sqlx::Type)]
#[sqlx(type_name = "plugin_type", rename_all = "snake_case")]
pub enum PluginType {
    Import,
    Export,
    Notification,
    Analysis,
    Integration,
    Other,
}

impl PluginType {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Import => "import",
            Self::Export => "export",
            Self::Notification => "notification",
            Self::Analysis => "analysis",
            Self::Integration => "integration",
            Self::Other => "other",
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, sqlx::FromRow)]
pub struct PluginMetadata {
    pub id: Uuid,
    pub name: String,
    pub display_name: String,
    pub version: String,
    pub author: String,
    pub description: Option<String>,
    pub plugin_type: PluginType,
    pub language: String,
    pub enabled: bool,
    pub path: String,
    pub config: serde_json::Value,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct NewPlugin {
    pub name: String,
    pub display_name: String,
    pub version: String,
    pub author: String,
    pub description: Option<String>,
    pub plugin_type: PluginType,
    pub language: String,
    pub path: String,
    pub config: Option<serde_json::Value>,
}

// FIXED: Aggiunto campo version
#[derive(Debug, Serialize, Deserialize)]
pub struct UpdatePlugin {
    pub display_name: Option<String>,
    pub version: Option<String>, // FIXED: Aggiunto questo campo
    pub description: Option<String>,
    pub enabled: Option<bool>,
    pub config: Option<serde_json::Value>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PluginExecution {
    pub plugin_id: Uuid,
    pub action: String,
    pub parameters: serde_json::Value,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PluginResult {
    pub success: bool,
    pub data: Option<serde_json::Value>,
    pub error: Option<String>,
    pub execution_time_ms: u64,
}