// src/api/mod.rs
// FIXED: Convertito completamente da Extension a State per Axum 0.6

use axum::{
    middleware,
    routing::{delete, get, post, put},
    Router,
    Json,
    http::StatusCode,
};
use serde_json::json;
use sqlx::PgPool;
use std::sync::Arc;
use tower_http::cors::{Any, CorsLayer};
use crate::auth::{Auth, require_auth, require_admin};
use crate::handlers;
use crate::AppState; // FIXED: Import from lib.rs

// Simple health check function
async fn health_check() -> Result<Json<serde_json::Value>, StatusCode> {
    Ok(Json(json!({
        "status": "healthy",
        "timestamp": chrono::Utc::now().to_rfc3339(),
        "version": env!("CARGO_PKG_VERSION")
    })))
}

pub fn create_router(pool: Arc<PgPool>, auth: Arc<Auth>) -> Router {
    // Create shared application state
    let state = AppState {
        pool: pool.clone(),
        auth: auth.clone(),
    };

    // Configurazione CORS per sicurezza
    let cors = CorsLayer::new()
        .allow_origin(Any)
        .allow_methods(Any)
        .allow_headers(Any);

    // Routes pubbliche (non richiedono autenticazione)
    let public_routes = Router::new()
        .route("/api/auth/login", post(handlers::auth::login))
        .route("/api/health", get(health_check))
        .with_state(state.clone());

    // Routes protette - richiedono autenticazione
    let protected_routes = Router::new()
        // User routes - il proprio profilo
        .route("/api/users/me", get(handlers::user::get_current_user))
        .route("/api/users/me", put(handlers::user::update_current_user))
        .route("/api/users/me/password", put(handlers::user::change_password))
        .route("/api/users/me/avatar", post(handlers::user::upload_avatar))
        .route("/api/users/me/sessions", get(handlers::user::get_user_sessions))
        .route("/api/users/me/sessions/:id", delete(handlers::user::revoke_session))
        .route("/api/users/me/2fa/enable", post(handlers::user::enable_two_factor))
        .route("/api/users/me/2fa/disable", post(handlers::user::disable_two_factor))
        .route("/api/users/me/2fa/verify", post(handlers::user::verify_two_factor))
        .route("/api/users/me/security", get(handlers::user::get_security_settings))
        .route("/api/users/me/security", put(handlers::user::update_security_settings))
        .route("/api/users/me/reputation", get(handlers::user::get_reputation_events))
        
        // Vulnerability routes
        .route("/api/vulnerabilities", get(handlers::vulnerability::list_vulnerabilities))
        .route("/api/vulnerabilities/:id", get(handlers::vulnerability::get_vulnerability))
        
        // Auth routes protette
        .route("/api/auth/logout", post(handlers::auth::logout))
        .route("/api/auth/refresh", post(handlers::auth::refresh_token))
        
        // FIXED: Middleware corretto per Axum 0.6 con State
        .layer(middleware::from_fn_with_state(state.clone(), require_auth))
        .with_state(state.clone());

    // Routes admin - richiedono ruolo admin
    let admin_routes = Router::new()
        // User management routes
        .route("/api/users", get(handlers::user::list_users))
        .route("/api/users", post(handlers::user::create_user))
        .route("/api/users/:id", get(handlers::user::get_user))
        .route("/api/users/:id", put(handlers::user::update_user))
        .route("/api/users/:id", delete(handlers::user::delete_user))
        .route("/api/users/:id/lock", post(handlers::user::lock_user))
        .route("/api/users/:id/unlock", post(handlers::user::unlock_user))
        .route("/api/users/:id/sessions", get(handlers::user::get_user_sessions_admin))
        .route("/api/users/:id/sessions/revoke-all", post(handlers::user::revoke_all_user_sessions))
        
        // Vulnerability management routes
        .route("/api/vulnerabilities", post(handlers::vulnerability::create_vulnerability))
        .route("/api/vulnerabilities/:id", put(handlers::vulnerability::update_vulnerability))
        .route("/api/vulnerabilities/:id", delete(handlers::vulnerability::delete_vulnerability))
        .route("/api/vulnerabilities/:id/assign", post(handlers::vulnerability::assign_to_team))
        
        // Security routes
        .route("/api/security/ip-whitelist", get(handlers::security::get_ip_whitelist))
        .route("/api/security/ip-whitelist", post(handlers::security::add_ip_whitelist))
        .route("/api/security/ip-whitelist/:id", delete(handlers::security::remove_ip_whitelist))
        .route("/api/security/permissions/:user_id", get(handlers::security::get_user_permissions))
        .route("/api/security/permissions", post(handlers::security::grant_user_permission))
        .route("/api/security/permissions/:id", delete(handlers::security::revoke_user_permission))
        
        // Audit routes
        .route("/api/audit/logs", get(handlers::audit::get_audit_logs))
        .route("/api/audit/logs", post(handlers::audit::create_audit_log))
        .route("/api/audit/logs/:id", get(handlers::audit::get_audit_log_by_id))
        .route("/api/audit/stats", get(handlers::audit::get_audit_stats))
        
        // FIXED: Middleware chain corretto per admin routes con State
        .layer(middleware::from_fn(require_admin))
        .layer(middleware::from_fn_with_state(state.clone(), require_auth))
        .with_state(state.clone());

    // Combina tutte le routes
    Router::new()
        .merge(public_routes)
        .merge(protected_routes)
        .merge(admin_routes)
        .layer(cors)
}