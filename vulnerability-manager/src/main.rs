// src/main.rs
// FIXED: Corrected for Axum 0.6 compatibility (axum::serve doesn't exist in 0.6)

use anyhow::Result;
use sqlx::postgres::PgPoolOptions;
use std::net::SocketAddr;
use std::sync::Arc;
use tracing::info;
use tracing_subscriber::prelude::*;

mod api;
mod auth;
mod config;
mod handlers;
mod models;
mod plugins;

use crate::auth::Auth;

#[tokio::main]
async fn main() -> Result<()> {
    // Inizializza il logging
    tracing_subscriber::registry()
        .with(
            tracing_subscriber::fmt::layer()
                .with_target(false)
                .with_thread_ids(true)
                .with_level(true)
        )
        .with(tracing_subscriber::EnvFilter::from_default_env())
        .init();

    // Carica la configurazione
    let config = config::load_config()?;
    
    info!("üöÄ Starting Vulnerability Manager v{}", env!("CARGO_PKG_VERSION"));
    
    // Connetti al database
    let pool = PgPoolOptions::new()
        .max_connections(config.database.max_connections)
        .connect(&config.database.url)
        .await?;
    
    info!("‚úÖ Connected to database");
    
    // Esegui le migrazioni se disponibili
    // sqlx::migrate!("./migrations").run(&pool).await?;
    info!("‚úÖ Database migrations completed");
    
    // Crea istanze Arc per condivisione thread-safe
    let pool = Arc::new(pool);
    let auth = Arc::new(Auth::new(&config.auth));
    
    info!("‚úÖ Authentication system initialized");
    
    // Crea il router dell'applicazione
    let app = api::create_router(pool, auth);
    
    // Configura l'indirizzo del server
    let addr = SocketAddr::from(([0, 0, 0, 0], config.server.port));
    info!("üåê Server listening on {}", addr);
    
    // FIXED: Usa axum::Server per Axum 0.6 invece di axum::serve (che non esiste)
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await?;
    
    Ok(())
}