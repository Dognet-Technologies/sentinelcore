use anyhow::{Context, Result};
use serde::Deserialize;
use std::path::Path;

#[derive(Debug, Deserialize, Clone)]
pub struct Config {
    pub server: ServerConfig,
    pub database: DatabaseConfig,
    pub auth: AuthConfig,
    pub plugins: PluginsConfig,
    pub log: LogConfig,
}

#[derive(Debug, Deserialize, Clone)]
pub struct ServerConfig {
    pub port: u16,
    pub host: String,
}

#[derive(Debug, Deserialize, Clone)]
pub struct DatabaseConfig {
    pub url: String,
    pub max_connections: u32,
}

#[derive(Debug, Deserialize, Clone)]
pub struct AuthConfig {
    pub secret_key: String,
    pub token_duration_hours: u64,
    pub password_policy: PasswordPolicyConfig,
}

#[derive(Debug, Deserialize, Clone)]
pub struct PasswordPolicyConfig {
    pub min_length: u8,
    pub require_uppercase: bool,
    pub require_lowercase: bool,
    pub require_numbers: bool,
    pub require_special_chars: bool,
    pub special_chars: String,
    pub max_length: u8,
    pub prevent_common_passwords: bool,
}

#[derive(Debug, Deserialize, Clone)]
pub struct PluginsConfig {
    pub directory: String,
    pub enabled: bool,
}

#[derive(Debug, Deserialize, Clone)]
pub struct LogConfig {
    pub level: String,
    pub file: Option<String>,
}

pub fn load_config() -> Result<Config> {
    // Load .env file if it exists
    let _ = dotenv::dotenv();
    
    let mut builder = config::Config::builder();
    
    // Add default config
    builder = builder.add_source(config::File::from_str(
        include_str!("../../config/default.yaml"), 
        config::FileFormat::Yaml
    ));
    
    // Add environment-specific config if it exists
    let env = std::env::var("APP_ENV").unwrap_or_else(|_| "development".into());
    let env_config = format!("config/{}.yaml", env);
    
    if Path::new(&env_config).exists() {
        builder = builder.add_source(config::File::with_name(&env_config));
    }
    
    // Add environment variables with prefix VULN_
    builder = builder.add_source(config::Environment::with_prefix("VULN").separator("_"));
    
    // Build and deserialize
    let config: Config = builder.build()
        .context("Failed to build configuration")?
        .try_deserialize()
        .context("Failed to deserialize configuration")?;
    
    Ok(config)
}