use sqlx::PgPool;
use argon2::{
    password_hash::{rand_core::OsRng, PasswordHasher, SaltString},
    Argon2,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("Inizializzazione database...");
    
    // Usa la stessa DATABASE_URL del tuo progetto principale
    let database_url = "postgresql://vlnman:DogNET@localhost/vulnerability_manager"; // METTI LA TUA URL
    
    let pool = PgPool::connect(&database_url).await?;
    println!("✓ Connesso al database");
    
    // Hash della password
    let password = "admin123";
    let salt = SaltString::generate(&mut OsRng);
    let argon2 = Argon2::default();
    
    // Gestisci l'errore di argon2 esplicitamente
    let hashed_password = argon2
        .hash_password(password.as_bytes(), &salt)
        .map_err(|e| format!("Errore hashing password: {}", e))?
        .to_string();
    
    println!("✓ Password hashata");
    sqlx::query(
    "UPDATE users SET password_hash = $1 WHERE username = $2"
	)
	.bind(&hashed_password)
	.bind("admin")
	.execute(&pool)
	.await?;

    // Inserisci l'utente
    match sqlx::query(
        "INSERT INTO users (username, email, password_hash, role) 
         VALUES ($1, $2, $3, $4::user_role)"
    )
    .bind("admin")
    .bind("admin@dognet.tech")
    .bind(&hashed_password)
    .bind("admin")
    .execute(&pool)
    .await {
        Ok(_) => {
            println!("\n✅ Utente admin creato con successo!");
            println!("  Username: admin");
            println!("  Password: {}", password);
            println!("  Email: admin@dognet.tech");
            println!("  Role: admin");
        },
        Err(e) => {
            println!("\n❌ Errore: {}", e);
            println!("\nPossibili soluzioni:");
            println!("1. Verifica che la tabella 'users' esista");
            println!("2. Verifica che il tipo 'user_role' esista");
            println!("3. L'utente 'admin' potrebbe già esistere");
        }
    }
    
    Ok(())
}
